/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package railway.reservation.system;

import com.mysql.jdbc.exceptions.MySQLIntegrityConstraintViolationException;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerDateModel;
import javax.swing.SpinnerModel;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JRDesignQuery;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Gunesh Madusanka
 */
public class wagon_transportation extends javax.swing.JFrame {

    /**
     * Creates new form booking_interface
     */
     int x, y;
    public wagon_transportation() {
        initComponents();
       status();
      status1();
      status2();

        wagon_count2.setVisible(false);
        wagon_count3.setVisible(false);
        wagon_count4.setVisible(false);

    }

    public wagon_transportation(String dat1, String dat2, String dat3, int dat4, int dat5, String dat6) {
        initComponents();
        fare.setText(dat1);
        type.setText(dat2);
        if (dat3.equals("Below Rambukkana")) {
            cls2_below.setSelected(true);
        }
        if (dat3.equals("Above Rambukkana")) {
            cls2_above.setSelected(true);
        }
        ton.setValue(dat4);
        km.setValue(dat5);
        pno.setText(dat6);
        jButton1.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        kGradientPanel1 = new keeptoo.KGradientPanel();
        jLabel1 = new javax.swing.JLabel();
        kGradientPanel2 = new keeptoo.KGradientPanel();
        jLabel15 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jCalendar1 = new com.toedter.calendar.JCalendar();
        jLabel7 = new javax.swing.JLabel();
        nic = new javax.swing.JTextField();
        name = new javax.swing.JTextField();
        add = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        pno = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        type = new javax.swing.JTextField();
        purpose = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        ends = new javax.swing.JComboBox();
        starts = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        rname = new javax.swing.JTextField();
        raddress = new javax.swing.JTextField();
        line = new javax.swing.JComboBox();
        line1 = new javax.swing.JComboBox();
        Date date1=new Date();
        SpinnerModel sm1=new SpinnerDateModel(date1,null,null,Calendar.HOUR_OF_DAY);
        etime = new javax.swing.JSpinner(sm1);
        Date date=new Date();
        SpinnerModel sm=new SpinnerDateModel(date,null,null,Calendar.HOUR_OF_DAY);
        stime = new javax.swing.JSpinner(sm);
        jPanel2 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        authorize = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        wg1 = new javax.swing.JCheckBox();
        wg2 = new javax.swing.JCheckBox();
        wg3 = new javax.swing.JCheckBox();
        wg4 = new javax.swing.JCheckBox();
        class1 = new javax.swing.JRadioButton();
        class2 = new javax.swing.JRadioButton();
        cls1_below = new javax.swing.JRadioButton();
        cls1_above = new javax.swing.JRadioButton();
        cls2_below = new javax.swing.JRadioButton();
        cls2_above = new javax.swing.JRadioButton();
        km = new com.toedter.components.JSpinField();
        fare = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        ton = new com.toedter.components.JSpinField();
        jLabel23 = new javax.swing.JLabel();
        wagon_count4 = new javax.swing.JTextField();
        wagon_count1 = new javax.swing.JTextField();
        wagon_count2 = new javax.swing.JTextField();
        wagon_count3 = new javax.swing.JTextField();
        wlbl4 = new javax.swing.JLabel();
        wlbl1 = new javax.swing.JLabel();
        wlbl2 = new javax.swing.JLabel();
        wlbl3 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        kGradientPanel3 = new keeptoo.KGradientPanel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);

        kGradientPanel1.setkEndColor(new java.awt.Color(255, 153, 153));
        kGradientPanel1.setkStartColor(new java.awt.Color(51, 255, 204));
        kGradientPanel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                kGradientPanel1MouseDragged(evt);
            }
        });
        kGradientPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                kGradientPanel1MouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                kGradientPanel1MousePressed(evt);
            }
        });
        kGradientPanel1.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Goods Transportation ");
        kGradientPanel1.add(jLabel1);
        jLabel1.setBounds(360, 0, 420, 40);

        kGradientPanel2.setkEndColor(new java.awt.Color(255, 51, 51));
        kGradientPanel2.setkStartColor(new java.awt.Color(0, 255, 204));
        kGradientPanel2.setLayout(null);

        jLabel15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/shutdown_48px.png"))); // NOI18N
        jLabel15.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel15MouseClicked(evt);
            }
        });
        kGradientPanel2.add(jLabel15);
        jLabel15.setBounds(0, 0, 50, 40);

        jPanel1.setBackground(new java.awt.Color(153, 255, 153));
        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel2.setText("National Identity Card");

        jLabel3.setText("Sender's Name");

        jLabel4.setText("Sender's Address");

        jLabel5.setText("Start Time");

        jLabel6.setText("End Time");

        jLabel7.setText("Date");

        nic.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nicKeyPressed(evt);
            }
        });

        name.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nameKeyPressed(evt);
            }
        });

        add.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                addKeyPressed(evt);
            }
        });

        jLabel11.setText("Transport permit");

        pno.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                pnoKeyPressed(evt);
            }
        });

        jLabel12.setText("Permit No:");

        jLabel19.setText("Good Type :");

        jLabel20.setText("Purpose :");

        type.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                typeKeyPressed(evt);
            }
        });

        purpose.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                purposeKeyPressed(evt);
            }
        });

        jLabel8.setText("Sending RailwayStation");

        jLabel22.setText("Receiving RailwayStation");

        starts.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                startsKeyPressed(evt);
            }
        });

        jLabel9.setText("Name of the Receiver");

        jLabel10.setText("Address of the Receiver");

        rname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                rnameKeyPressed(evt);
            }
        });

        raddress.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                raddressKeyPressed(evt);
            }
        });

        line.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SELECT Start Line First", "Main Line", "Matale Line", "Puttlam Line", "Northern Line", "Batticoloa Line", "Coast Line", "KV Line", "Trincomalee Line", "Talaimannar Line" }));
        line.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                lineItemStateChanged(evt);
            }
        });
        line.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lineMouseClicked(evt);
            }
        });
        line.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineActionPerformed(evt);
            }
        });
        line.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                lineKeyPressed(evt);
            }
        });

        line1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SELECT End Line First", "Main Line", "Matale Line", "Puttlam Line", "Northern Line", "Batticoloa Line", "Coast Line", "KV Line", "Trincomalee Line", "Talaimannar Line" }));
        line1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                line1ItemStateChanged(evt);
            }
        });
        line1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                line1MouseClicked(evt);
            }
        });
        line1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                line1KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                line1KeyReleased(evt);
            }
        });

        JSpinner.DateEditor de1=new JSpinner.DateEditor(etime,"hh:mm:ssa");
        etime.setEditor(de1);

        JSpinner.DateEditor de=new JSpinner.DateEditor(stime,"hh:mm:ssa");
        stime.setEditor(de);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(jLabel2)
                        .addGap(44, 44, 44)
                        .addComponent(nic, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(jLabel11)
                        .addGap(70, 70, 70)
                        .addComponent(jLabel12)
                        .addGap(10, 10, 10)
                        .addComponent(pno, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(208, 208, 208)
                        .addComponent(jLabel19)
                        .addGap(1, 1, 1)
                        .addComponent(type, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(208, 208, 208)
                        .addComponent(jLabel20)
                        .addGap(14, 14, 14)
                        .addComponent(purpose, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(jLabel3)
                        .addGap(79, 79, 79)
                        .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(jLabel4)
                        .addGap(67, 67, 67)
                        .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(jLabel9)
                        .addGap(46, 46, 46)
                        .addComponent(rname, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(jLabel10)
                        .addGap(34, 34, 34)
                        .addComponent(raddress, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(jLabel5)
                        .addGap(91, 91, 91)
                        .addComponent(stime, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(jLabel6)
                        .addGap(97, 97, 97)
                        .addComponent(etime, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(jLabel7)
                        .addGap(85, 85, 85)
                        .addComponent(jCalendar1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(68, 68, 68)
                                .addComponent(starts, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel22)
                                .addGap(60, 60, 60)
                                .addComponent(ends, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(line, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(line1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel2))
                    .addComponent(nic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12)
                    .addComponent(pno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel19)
                    .addComponent(type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel20)
                    .addComponent(purpose, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(rname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(raddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(stime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(etime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jCalendar1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(line, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(line1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(starts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ends, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22))
                .addGap(23, 23, 23))
        );

        jPanel2.setBackground(new java.awt.Color(255, 204, 204));
        jPanel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel2.setForeground(new java.awt.Color(255, 204, 204));

        jLabel13.setText("Authorized Person");

        jLabel14.setText("Transportation good in wagon (Per Tone)");

        jLabel16.setText("Number of KM");

        jLabel21.setText("Wagon Reservation");

        wg1.setSelected(true);
        wg1.setText("Four Wheeled Wagon");
        wg1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                wg1MouseClicked(evt);
            }
        });
        wg1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wg1ActionPerformed(evt);
            }
        });
        wg1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                wg1PropertyChange(evt);
            }
        });

        wg2.setText("8 Wheel Wagon [up to 28 tones]");
        wg2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                wg2ItemStateChanged(evt);
            }
        });
        wg2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                wg2MouseClicked(evt);
            }
        });
        wg2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wg2ActionPerformed(evt);
            }
        });
        wg2.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                wg2PropertyChange(evt);
            }
        });

        wg3.setText("8 Wheel Wagon [up to 39.6 tones]");
        wg3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                wg3MouseClicked(evt);
            }
        });
        wg3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wg3ActionPerformed(evt);
            }
        });

        wg4.setText("8 Wheel Wagon [above 39.6 tones]");
        wg4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                wg4MouseClicked(evt);
            }
        });

        buttonGroup2.add(class1);
        class1.setText("Class 1(Raw Material)");
        class1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                class1ActionPerformed(evt);
            }
        });

        buttonGroup2.add(class2);
        class2.setSelected(true);
        class2.setText("Class 2(Bulk Goods)");
        class2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                class2ActionPerformed(evt);
            }
        });

        buttonGroup3.add(cls1_below);
        cls1_below.setSelected(true);
        cls1_below.setText("Below Rabukkana");

        buttonGroup3.add(cls1_above);
        cls1_above.setText("Above Rabukkana");

        buttonGroup4.add(cls2_below);
        cls2_below.setSelected(true);
        cls2_below.setText("Below Rabukkana");

        buttonGroup4.add(cls2_above);
        cls2_above.setText("Above Rabukkana");

        jButton1.setText("Train Fares Calculator");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel23.setText("Number of Tonn");

        wagon_count4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                wagon_count4KeyReleased(evt);
            }
        });

        wagon_count1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                wagon_count1KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                wagon_count1KeyReleased(evt);
            }
        });

        wagon_count2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wagon_count2ActionPerformed(evt);
            }
        });
        wagon_count2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                wagon_count2KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                wagon_count2KeyReleased(evt);
            }
        });

        wagon_count3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                wagon_count3KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                wagon_count3KeyReleased(evt);
            }
        });

        wlbl2.setText(" ");

        jButton5.setText("Petroleum products or Mail Train fare Calculator ");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(277, 277, 277)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(wg4)
                        .addGap(23, 23, 23)
                        .addComponent(wagon_count4, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(wlbl4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(wg2)
                        .addGap(37, 37, 37)
                        .addComponent(wagon_count2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(wlbl2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(wg3)
                        .addGap(27, 27, 27)
                        .addComponent(wagon_count3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(wlbl3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(147, 147, 147)
                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(147, 147, 147)
                        .addComponent(class1)
                        .addGap(71, 71, 71)
                        .addComponent(cls1_below)
                        .addGap(11, 11, 11)
                        .addComponent(cls1_above))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(147, 147, 147)
                        .addComponent(class2, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(71, 71, 71)
                        .addComponent(cls2_below)
                        .addGap(11, 11, 11)
                        .addComponent(cls2_above))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(147, 147, 147)
                        .addComponent(jLabel23)
                        .addGap(123, 123, 123)
                        .addComponent(ton, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(147, 147, 147)
                        .addComponent(jLabel16)
                        .addGap(133, 133, 133)
                        .addComponent(km, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(147, 147, 147)
                        .addComponent(jButton1)
                        .addGap(13, 13, 13)
                        .addComponent(fare, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(147, 147, 147)
                        .addComponent(jLabel13)
                        .addGap(62, 62, 62)
                        .addComponent(authorize, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(117, 117, 117)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 524, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(157, 157, 157)
                .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(wg1)
                .addGap(91, 91, 91)
                .addComponent(wagon_count1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(wlbl1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel21)
                    .addComponent(wg1)
                    .addComponent(wagon_count1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(wlbl1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(wg2)
                    .addComponent(wagon_count2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(wlbl2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(wg3)
                    .addComponent(wagon_count3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(wlbl3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(wg4)
                    .addComponent(wagon_count4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(wlbl4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(class1)
                    .addComponent(cls1_below)
                    .addComponent(cls1_above))
                .addGap(37, 37, 37)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(class2)
                    .addComponent(cls2_below)
                    .addComponent(cls2_above))
                .addGap(7, 7, 7)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel23)
                    .addComponent(ton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel16))
                    .addComponent(km, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fare, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13)
                    .addComponent(authorize, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        kGradientPanel3.setkEndColor(new java.awt.Color(204, 204, 255));
        kGradientPanel3.setkStartColor(new java.awt.Color(102, 255, 204));
        kGradientPanel3.setLayout(null);

        jButton2.setText("Ticket Booking");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        kGradientPanel3.add(jButton2);
        jButton2.setBounds(90, 10, 130, 23);

        jButton3.setText("Booking Cancelation");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        kGradientPanel3.add(jButton3);
        jButton3.setBounds(90, 40, 129, 23);

        jButton4.setText(" General Custom Report");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        kGradientPanel3.add(jButton4);
        jButton4.setBounds(270, 70, 200, 40);

        jButton6.setText("Booking For Petrolium");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        kGradientPanel3.add(jButton6);
        jButton6.setBounds(500, 10, 155, 23);

        jButton7.setText("Petrolium Cancelation");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        kGradientPanel3.add(jButton7);
        jButton7.setBounds(500, 40, 160, 23);

        jButton8.setText("Booking For Mail");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        kGradientPanel3.add(jButton8);
        jButton8.setBounds(290, 10, 150, 23);

        jButton9.setText("Mail Cancelation");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        kGradientPanel3.add(jButton9);
        jButton9.setBounds(290, 40, 150, 23);

        jButton10.setText("Full Report with Petrol Subreport");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });
        kGradientPanel3.add(jButton10);
        jButton10.setBounds(50, 70, 210, 40);

        jButton11.setText("Full Report with Mail Subreport");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });
        kGradientPanel3.add(jButton11);
        jButton11.setBounds(480, 70, 210, 40);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(kGradientPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(kGradientPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 794, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(kGradientPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(kGradientPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(kGradientPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addComponent(kGradientPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void wg2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wg2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_wg2ActionPerformed

    private void wg3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wg3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_wg3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            String wagon = "";
            Double resfee = 0.0;
            if (wg1.isSelected()) {
                wagon = "Four Wheeled Wagon" + "|";
                resfee = 2500.00;
            }
            if (wg2.isSelected()) {
                wagon += "8 Wheel Wagon [up to 28 tones]" + "|";
                resfee += 3000.00;
            }
            if (wg3.isSelected()) {
                wagon += "8 Wheel Wagon [up to 39.6 tones]" + "|";
                resfee += 4000.00;
            }
            if (wg4.isSelected()) {
                wagon += "8 Wheel Wagon [above 39.6 tones]" + "|";
                resfee += 4500.00;
            }

            Double km_price = 0.0;
            String cls = "";
            String class_state = "";
            if (class1.isSelected()) {
                cls = "Class 1(Raw Material)";
                if (cls1_below.isSelected()) {
                    class_state = "Below Rabukkana";
                    km_price = 3.75;
                } else {
                    class_state = "Above Rabukkana";
                    km_price = 5.25;
                }

            } else {
                cls = "Class 2(Bulk Goods)";
                if (cls2_below.isSelected()) {
                    class_state = "Below Rabukkana";
                    km_price = 4.50;
                } else {
                    class_state = "Above Rabukkana";
                    km_price = 6.00;
                }
            }

            Double kms = Double.valueOf(km.getValue());
            Double tons = Double.valueOf(ton.getValue());
            Double fee = km_price * kms * tons;
            Double total = fee + resfee;
            fare.setText(total.toString());

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        try {
            validate_nic();
            if (nic.getText().isEmpty()) {
                JOptionPane.showMessageDialog(rootPane, "Please Fill the relevant information", "Thank You", JOptionPane.WARNING_MESSAGE);
            } else {
                petroleum_mail pm = new petroleum_mail();
                pm.setVisible(true);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void class1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_class1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_class1ActionPerformed

    private void class2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_class2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_class2ActionPerformed

    private void lineItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_lineItemStateChanged
        try {
            starts.setSelectedItem("null");
            starts.removeAllItems();
            //Matale Line  Puttlam Line  Northern Line  Batticoloa Line  Coast Line  KV Line  Trincomalee Line Talaimannar Line
            String main[] = {"Maradana", "Dematagoda", "Kelaniya", "Wanawasala", "Hunupitiya", "Enderamulla", "Horape", "Ragama", "Walpola", "Batuwatte", "Bulugahagoda", "Ganemulla", "Yagoda", "Gampaha", "Daraluwa", "Bemmulla", "Magelegoda", "Heendeniya", "Veyangoda", "Wandurawa",
                "Keenawala", "Pallewala", "Ganegoda", "Wijayarajadahana", "Mihirigama", "Wilwatte", "Botale", "Abeypussa", "Yattalgoda", "Buthgamuwa", "Alawwa", "Wlakubura", "Polgahawela",
                "Panaleeya", "Tismalpola", "Yatagama", "Rambukkana", "Kadigamuwa", "Gangoda", "Ihalakotte", "Balana", "Kadugannawa", "Pilimatalawa", "Peradeniya", "Koshinna", "Gelioya",
                "Gampola", "Tembligala", "Ulapone", "Nawalapitiya", "Inguruoya", "Galaboda", "Watawala", "Ihalawatawala", "Rosella", "Hatton", "Kotagala", "Talawakele", "watagoda",
                "Greatwestern", "Radella", "Nanuoya", "Perakumpura", "Ambewela", "Pattipola", "Ohiya", "Idalgasinna", "Haputale", "Deyatalawa", "Bandarawela", "Kinigama",
                "Heeloya", "Kitalelle", "Elle", "Demodara", "Uduwara", "Haliela", "Badulla"
            };
            String matale[] = {"Sarasaviuyana", "Kandy", "Mahaiyawa", "Katugastota", "Udatalawinna", "Wattegama", "Pathanpha", "Udaththawala", "Ukuwela", "Matale"};
            String puttalama[] = {"Peralanda", "Kandana", "Kapuwatte", "Ja-Ela", "Tudella", "Kudahakapola", "Alawatupitiya", "Seeduwa", "Liyanagemulla",
                "Katunayaka Airport", "Katunayake", "Trade Zoone", "Kurana", "Negombo", "kattuwa", "Kochchikade", "Waikkala", "Bolawatte",
                "Borelessa", "Lunuwila", "Tummodara", "Nattandiya", "Walahapitiya", "Kudawewa", "Nelumpokuna", "Madampe", "Kakkapalliya",
                "Sawarana", "Chilaw", "Manuwangama", "Bangadeniya", "Arachchikattuwa", "Anawilundawa", "Battaluoya", "Pulachchikulam", "Mundal",
                "Mangalaeliya", "Madurankuliya", "Erukkalam pendu", "Palavi", "Thilladiya", "Puttalam", "Noor Nagar", "Karadipuwar", "Periyanagavillu"
            };

            String northern[] = {"Girambe", "Talawattegedara", "Potuhera", "Nailiya", "Kurunegala", "Muththettugala", "Wellawa", "Ganewatte", "Yahapauwa", "Nagollagama", "Timbiriyagedara",
                "Maho", "Randenigama", "Abanpola", "Galgamuwa", "Senarathgama", "Thambuttegama", "Talawa", "Srawasthipura", "Anuradhapura Town", "Anuradhapura",
                "Mihintale Junction", "Saliyapura", "Parasangahawewa", "Medagama", "Medawachchiya", "Poonewa", "Erittaperiyakulam", "Vavuniya", "Mihintale",
                "Parasangahawewa", "Medawachchiya", "Vavuniya", "Omantai", "Puliyankulama", "Mankulam", "Murukandi", "Kilinochchi", "Paranthan", "ElephantPass",
                "Pallai", "Kodikamam", "Chavakachcheri", "Navatkuli", "Jaffna", "Jaffna CSM", "Jaffna SM", "Kondavil", "Chunnakam", "Kankesanthurei"
            };

            String batticola[] = {"Konwewa", "Moragollagama", "kekirawa", "Kalawewa", "Palugaswewa", "Gal Oya Junction", "Higurakgoda", "Polonnaruwa", "Manampitiya", "Welikanda",
                "Punani", "Valachchenai", "Eravur", "Batticaloa"};

            String cost[] = {"Fort", "Secretartat Halt", "Kompnnavidiya", "Kollupitiya", "Bambalapitiya", "wellawatte", "Dehiwala", "Mount Laviniya", "Rathmalana", "Angulana",
                "Lunawa", "Moratuwa", "Koralawella", "Egodauyana", "Panadura", "Pinwatte", "Wadduwa", "Train Halt 01", "Kalutara North", "Kaluthara South", "Katukurunda",
                "Payagala North", "Payagala south", "Maggona", "Beruwala", "Hettimulla", "Aluthgama", "Bentota", "Induruwa", "Mha Induruwa", "kosgoda", "Piyagama",
                "Ahungalle", "Patagamgoda", "Balapitiya", "Andadola", "Kandegoda", "Ambalangoda", "Madampagama", "Akurala", "Kahawa", "Telwatte", "Seenigama",
                "Hikkaduwa", "Thiranagama", "Kumarakanda", "Dodanduwa", "Rathgama", "Boossa", "Ginthota", "Piyadigama", "Richmond Hill", "Galle", "Katugoda",
                "Unawatuna", "Taple", "Habaraduwa", "Koggala", "Kathaluwa", "Ahangama", "Midigama", "Kumbalgama", "weligama", "Polwathumodara", "Mirissa", "Kamburugamuwa",
                "Walgama", "Matara", "Piliduwa"};

            String kv[] = {"Baseline Road", "Cotta Road", "Narahenpita", "Kirulapone", "Nugegoda", "Udhamulla", "Nawinna", "Maharagama", "Pannipitiya", "Kottawa", "Malapalle",
                "Homagama Hospital", "Homagama", "Panagoda", "Godagama", "Meegoda", "Watareka", "Padukka", "Arukkuwatte", "Angampitiya", "Uggalla", "Pinnawala",
                "Gammana", "Morakele", "Waga", "Kadugoda", "Kosgama", "puwakpitiya", "Avisawella"};

            String trinco[] = {"Kantale", "Tambalagamuwa", "China Bay", "Trincomalee"};

            String mannar1[] = {"Cheddikulam", "Madu Road", "Murunkan", "Mannar", "Pesalai", "Talaimannar", "Talaimannar Pier"};

            if (line.getSelectedItem().toString().equals("Main Line")) {
                for (int i = 0; i < main.length; i++) {
                    starts.addItem(main[i]);
                }
            }
            if (line.getSelectedItem().toString().equals("Matale Line")) {
                for (int j = 0; j < matale.length; j++) {
                    starts.addItem(matale[j]);
                }
            }
            if (line.getSelectedItem().toString().equals("Puttlam Line")) {
                for (int k = 0; k < puttalama.length; k++) {
                    starts.addItem(puttalama[k]);
                }
            }
            if (line.getSelectedItem().toString().equals("Northern Line")) {
                for (int m = 0; m < northern.length; m++) {
                    starts.addItem(northern[m]);
                }
            }
            if (line.getSelectedItem().toString().equals("Batticoloa Line")) {
                for (int n = 0; n < batticola.length; n++) {
                    starts.addItem(batticola[n]);
                }
            }
            if (line.getSelectedItem().toString().equals("Coast Line")) {
                for (int o = 0; o < cost.length; o++) {
                    starts.addItem(cost[o]);
                }
            }
            if (line.getSelectedItem().toString().equals("KV Line")) {
                for (int p = 0; p < kv.length; p++) {
                    starts.addItem(kv[p]);
                }
            }
            if (line.getSelectedItem().toString().equals("Trincomalee Line")) {
                for (int q = 0; q < trinco.length; q++) {
                    starts.addItem(trinco[q]);
                }
            }
            if (line.getSelectedItem().toString().equals("Talaimannar Line")) {

                for (int r = 0; r < mannar1.length; r++) {

                    starts.addItem(mannar1[r]);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_lineItemStateChanged

    private void lineMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lineMouseClicked

    }//GEN-LAST:event_lineMouseClicked

    private void line1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_line1ItemStateChanged
        try {
            ends.setSelectedItem("null");
            ends.removeAllItems();
            //Matale Line  Puttlam Line  Northern Line  Batticoloa Line  Coast Line  KV Line  Trincomalee Line Talaimannar Line
            String main[] = {"Maradana", "Dematagoda", "Kelaniya", "Wanawasala", "Hunupitiya", "Enderamulla", "Horape", "Ragama", "Walpola", "Batuwatte", "Bulugahagoda", "Ganemulla", "Yagoda", "Gampaha", "Daraluwa", "Bemmulla", "Magelegoda", "Heendeniya", "Veyangoda", "Wandurawa",
                "Keenawala", "Pallewala", "Ganegoda", "Wijayarajadahana", "Mihirigama", "Wilwatte", "Botale", "Abeypussa", "Yattalgoda", "Buthgamuwa", "Alawwa", "Wlakubura", "Polgahawela",
                "Panaleeya", "Tismalpola", "Yatagama", "Rambukkana", "Kadigamuwa", "Gangoda", "Ihalakotte", "Balana", "Kadugannawa", "Pilimatalawa", "Peradeniya", "Koshinna", "Gelioya",
                "Gampola", "Tembligala", "Ulapone", "Nawalapitiya", "Inguruoya", "Galaboda", "Watawala", "Ihalawatawala", "Rosella", "Hatton", "Kotagala", "Talawakele", "watagoda",
                "Greatwestern", "Radella", "Nanuoya", "Perakumpura", "Ambewela", "Pattipola", "Ohiya", "Idalgasinna", "Haputale", "Deyatalawa", "Bandarawela", "Kinigama",
                "Heeloya", "Kitalelle", "Elle", "Demodara", "Uduwara", "Haliela", "Badulla"
            };
            String matale[] = {"Sarasaviuyana", "Kandy", "Mahaiyawa", "Katugastota", "Udatalawinna", "Wattegama", "Pathanpha", "Udaththawala", "Ukuwela", "Matale"};
            String puttalama[] = {"Peralanda", "Kandana", "Kapuwatte", "Ja-Ela", "Tudella", "Kudahakapola", "Alawatupitiya", "Seeduwa", "Liyanagemulla",
                "Katunayaka Airport", "Katunayake", "Trade Zoone", "Kurana", "Negombo", "kattuwa", "Kochchikade", "Waikkala", "Bolawatte",
                "Borelessa", "Lunuwila", "Tummodara", "Nattandiya", "Walahapitiya", "Kudawewa", "Nelumpokuna", "Madampe", "Kakkapalliya",
                "Sawarana", "Chilaw", "Manuwangama", "Bangadeniya", "Arachchikattuwa", "Anawilundawa", "Battaluoya", "Pulachchikulam", "Mundal",
                "Mangalaeliya", "Madurankuliya", "Erukkalam pendu", "Palavi", "Thilladiya", "Puttalam", "Noor Nagar", "Karadipuwar", "Periyanagavillu"
            };

            String northern[] = {"Girambe", "Talawattegedara", "Potuhera", "Nailiya", "Kurunegala", "Muththettugala", "Wellawa", "Ganewatte", "Yahapauwa", "Nagollagama", "Timbiriyagedara",
                "Maho", "Randenigama", "Abanpola", "Galgamuwa", "Senarathgama", "Thambuttegama", "Talawa", "Srawasthipura", "Anuradhapura Town", "Anuradhapura",
                "Mihintale Junction", "Saliyapura", "Parasangahawewa", "Medagama", "Medawachchiya", "Poonewa", "Erittaperiyakulam", "Vavuniya", "Mihintale",
                "Parasangahawewa", "Medawachchiya", "Vavuniya", "Omantai", "Puliyankulama", "Mankulam", "Murukandi", "Kilinochchi", "Paranthan", "ElephantPass",
                "Pallai", "Kodikamam", "Chavakachcheri", "Navatkuli", "Jaffna", "Jaffna CSM", "Jaffna SM", "Kondavil", "Chunnakam", "Kankesanthurei"
            };

            String batticola[] = {"Konwewa", "Moragollagama", "kekirawa", "Kalawewa", "Palugaswewa", "Gal Oya Junction", "Higurakgoda", "Polonnaruwa", "Manampitiya", "Welikanda",
                "Punani", "Valachchenai", "Eravur", "Batticaloa"};

            String cost[] = {"Fort", "Secretartat Halt", "Kompnnavidiya", "Kollupitiya", "Bambalapitiya", "wellawatte", "Dehiwala", "Mount Laviniya", "Rathmalana", "Angulana",
                "Lunawa", "Moratuwa", "Koralawella", "Egodauyana", "Panadura", "Pinwatte", "Wadduwa", "Train Halt 01", "Kalutara North", "Kaluthara South", "Katukurunda",
                "Payagala North", "Payagala south", "Maggona", "Beruwala", "Hettimulla", "Aluthgama", "Bentota", "Induruwa", "Mha Induruwa", "kosgoda", "Piyagama",
                "Ahungalle", "Patagamgoda", "Balapitiya", "Andadola", "Kandegoda", "Ambalangoda", "Madampagama", "Akurala", "Kahawa", "Telwatte", "Seenigama",
                "Hikkaduwa", "Thiranagama", "Kumarakanda", "Dodanduwa", "Rathgama", "Boossa", "Ginthota", "Piyadigama", "Richmond Hill", "Galle", "Katugoda",
                "Unawatuna", "Taple", "Habaraduwa", "Koggala", "Kathaluwa", "Ahangama", "Midigama", "Kumbalgama", "weligama", "Polwathumodara", "Mirissa", "Kamburugamuwa",
                "Walgama", "Matara", "Piliduwa"};

            String kv[] = {"Baseline Road", "Cotta Road", "Narahenpita", "Kirulapone", "Nugegoda", "Udhamulla", "Nawinna", "Maharagama", "Pannipitiya", "Kottawa", "Malapalle",
                "Homagama Hospital", "Homagama", "Panagoda", "Godagama", "Meegoda", "Watareka", "Padukka", "Arukkuwatte", "Angampitiya", "Uggalla", "Pinnawala",
                "Gammana", "Morakele", "Waga", "Kadugoda", "Kosgama", "puwakpitiya", "Avisawella"};

            String trinco[] = {"Kantale", "Tambalagamuwa", "China Bay", "Trincomalee"};

            String mannar1[] = {"Cheddikulam", "Madu Road", "Murunkan", "Mannar", "Pesalai", "Talaimannar", "Talaimannar Pier"};

            if (line1.getSelectedItem().toString().equals("Main Line")) {
                for (int i = 0; i < main.length; i++) {
                    ends.addItem(main[i]);
                }
            }
            if (line1.getSelectedItem().toString().equals("Matale Line")) {
                for (int j = 0; j < matale.length; j++) {
                    ends.addItem(matale[j]);
                }
            }
            if (line1.getSelectedItem().toString().equals("Puttlam Line")) {
                for (int k = 0; k < puttalama.length; k++) {
                    ends.addItem(puttalama[k]);
                }
            }
            if (line1.getSelectedItem().toString().equals("Northern Line")) {
                for (int m = 0; m < northern.length; m++) {
                    ends.addItem(northern[m]);
                }
            }
            if (line1.getSelectedItem().toString().equals("Batticoloa Line")) {
                for (int n = 0; n < batticola.length; n++) {
                    ends.addItem(batticola[n]);
                }
            }
            if (line1.getSelectedItem().toString().equals("Coast Line")) {
                for (int o = 0; o < cost.length; o++) {
                    ends.addItem(cost[o]);
                }
            }
            if (line1.getSelectedItem().toString().equals("KV Line")) {
                for (int p = 0; p < kv.length; p++) {
                    ends.addItem(kv[p]);
                }
            }
            if (line1.getSelectedItem().toString().equals("Trincomalee Line")) {
                for (int q = 0; q < trinco.length; q++) {
                    ends.addItem(trinco[q]);
                }
            }
            if (line1.getSelectedItem().toString().equals("Talaimannar Line")) {

                for (int r = 0; r < mannar1.length; r++) {

                    ends.addItem(mannar1[r]);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_line1ItemStateChanged

    private void line1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_line1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_line1MouseClicked

    private void lineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lineActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        
        validate_time(); 
        validate_date();
        try {
            
            validate_nic();
            Date d = new Date();
            SimpleDateFormat sdf = new SimpleDateFormat("hh:mm:ss");
            String start1 = sdf.format(stime.getValue());
            String end1 = sdf.format(etime.getValue());

            String wagon = "";
            if (wg1.isSelected()) {
                wagon = "Four Wheeled Wagon" + "|";
            }
            if (wg2.isSelected()) {
                wagon += "8 Wheel Wagon [up to 28 tones]" + "|";
            }
            if (wg3.isSelected()) {
                wagon += "8 Wheel Wagon [up to 39.6 tones]" + "|";
            }
            if (wg4.isSelected()) {
                wagon += "8 Wheel Wagon [above 39.6 tones]" + "|";
            }

            String cls = "";
            if (class1.isSelected()) {
                cls = "Class 1(Raw Material)";

            } else {
                cls = "Class 2(Bulk Goods)";
            }
            String class_state = "";
            if (cls1_below.isSelected()) {
                class_state = "Below Rabukkana";
            } else {
                class_state = "Above Rabukkana";
            }
            String class1_state = "";
            if (cls2_below.isSelected()) {
                class_state = "Below Rabukkana";
            } else {
                class_state = "Above Rabukkana";
            }

            SimpleDateFormat sdf1 = new SimpleDateFormat("E MMM dd yyyy");
            String mod_date = sdf1.format(jCalendar1.getDate());
            if (!(nic.getText().isEmpty())) {
                db.iud("insert into good_transportation (NIC, permit_no, type, purpose, sender_name, sender_address,receiver_name,receiver_address, start_time, end_time, date, from_f, to_t,wagon_type, class,tonn, km, fare, authorized,4_wheel,8_wheel_1,8_wheel_2,8_wheel_3,status) values ('" + nic.getText() + "','" + pno.getText() + "','" + type.getText() + "','" + purpose.getText() + "','" + name.getText() + "','" + add.getText() + "','" + rname.getText() + "','" + raddress.getText() + "','" + start1 + "','" + end1 + "','" + mod_date + "','" + starts.getSelectedItem().toString() + "','" + ends.getSelectedItem().toString() + "','" + wagon + "','" + cls + "','" + ton.getValue() + "','" + km.getValue() + "','" + fare.getText() + "','" + authorize.getText() + "','" + Integer.parseInt(wagon_count1.getText()) + "','" + Integer.parseInt(wagon_count2.getText()) + "','" + Integer.parseInt(wagon_count3.getText()) + "','" + Integer.parseInt(wagon_count4.getText()) + "','booking') ");
                JOptionPane.showMessageDialog(rootPane, "Data Insert Successfully", "Thank You", JOptionPane.OK_OPTION);
            }

        } catch (NumberFormatException ne) {
            JOptionPane.showMessageDialog(rootPane, "Please Put All Zeros", "Thank You", JOptionPane.WARNING_MESSAGE);

        } catch (NullPointerException n) {
            JOptionPane.showMessageDialog(rootPane, "Please Fill out all the necessary data", "Thank You", JOptionPane.WARNING_MESSAGE);
        } catch (MySQLIntegrityConstraintViolationException m) {
            JOptionPane.showMessageDialog(rootPane, "Cant Insert Succesfully Duplication Detected", "Thank You", JOptionPane.WARNING_MESSAGE);
        }
            
        catch (Exception e) {
            e.printStackTrace();
        }
         
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {

            String db_date = null;

            ResultSet rs;
            Statement st;
            Connection con = db.getDBCon();
            st = con.createStatement();
            String sql = "select date from good_transportation where NIC='" + nic.getText() + "' AND status='booking'";
            rs = st.executeQuery(sql);
            boolean b = false;
            boolean error = false;
            boolean success = false;

            String db_old = null;
            String db_new = null;

            while (rs.next()) {
                db_date = rs.getString("date");
                SimpleDateFormat sdf = new SimpleDateFormat("E MMM dd yyyy");
                Date dbdate = sdf.parse(db_date);

                db_old = sdf.format(dbdate);
                db_new = sdf.format(jCalendar1.getDate());
                if (db_old.equals(db_new)) {
                    db.iud("delete from good_transportation where NIC='" + nic.getText() + "' AND date='" + db_date + "'");
                    success = true;

                } else {
                    error = true;

                }
                b = true;
            }
            if (success == true) {
                JOptionPane.showMessageDialog(rootPane, "Delete Succesfully", "Thank You", JOptionPane.WARNING_MESSAGE);
            }
            if (error = true) {
                JOptionPane.showMessageDialog(rootPane, "Date mismatch", "Thank You", JOptionPane.WARNING_MESSAGE);

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        try {
            String good_type=pno.getText();
            if (good_type.equals("PETROL")) {
                
            
            validate_nic();
            validate_time(); 
            validate_date();
            Date d = new Date();
            SimpleDateFormat sdf = new SimpleDateFormat("hh:mm:ss");
            String start1 = sdf.format(stime.getValue());
            String end1 = sdf.format(etime.getValue());

            String wagon = "";
            if (wg1.isSelected()) {
                wagon = "Four Wheeled Wagon" + "|";
            }
            if (wg2.isSelected()) {
                wagon += "8 Wheel Wagon [up to 28 tones]" + "|";
            }
            if (wg3.isSelected()) {
                wagon += "8 Wheel Wagon [up to 39.6 tones]" + "|";
            }
            if (wg4.isSelected()) {
                wagon += "8 Wheel Wagon [above 39.6 tones]" + "|";
            }

            String cls = "";
            if (class1.isSelected()) {
                cls = "Class 1(Raw Material)";

            } else {
                cls = "Class 2(Bulk Goods)";
            }
            String class_state = "";
            if (cls1_below.isSelected()) {
                class_state = "Below Rabukkana";
            } else {
                class_state = "Above Rabukkana";
            }
            String class1_state = "";
            if (cls2_below.isSelected()) {
                class_state = "Below Rabukkana";
            } else {
                class_state = "Above Rabukkana";
            }

            SimpleDateFormat sdf1 = new SimpleDateFormat("E MMM dd yyyy");
            String mod_date = sdf1.format(jCalendar1.getDate());

            if (!(nic.getText().isEmpty())) {

                db.iud("insert into petrol (NIC,date,source,destination,wagon, permit_no, good, purpose, sender_name, sender_addr, res_name,"
                        + " res_addr, start_time, end_time, class, ton, km, fare, authorize,4_wheel,8_wheel_1,8_wheel_2,8_wheel_3,status)values"
                        + " ('" + nic.getText() + "','" + mod_date + "','" + starts.getSelectedItem().toString() + "',"
                        + "'" + ends.getSelectedItem().toString() + "','" + wagon + "',"
                        + "'" + pno.getText() + "','" + type.getText() + "','" + purpose.getText() + "',"
                        + "'" + name.getText() + "','" + add.getText() + "','" + rname.getText() + "','" + raddress.getText() + "','" + start1 + "',"
                        + "'" + end1 + "',"
                        + "'" + cls + "','" + ton.getValue() + "','" + km.getValue() + "','" + fare.getText() + "','" + authorize.getText() + "','" + Integer.parseInt(wagon_count1.getText()) + "','" + Integer.parseInt(wagon_count2.getText()) + "',"
                        + "'" + Integer.parseInt(wagon_count3.getText()) + "',"
                        + "'" + Integer.parseInt(wagon_count4.getText()) + "','booking')");

                JOptionPane.showMessageDialog(rootPane, "Data Insert Successfully", "Thank You", JOptionPane.WARNING_MESSAGE);
            }
        }else{
         JOptionPane.showMessageDialog(rootPane, "We can insert only Petrol Details", "Thank You", JOptionPane.WARNING_MESSAGE);
 
            }
        
        } catch (Exception e) {

            JOptionPane.showMessageDialog(rootPane, "Cant Insert Succesfully Duplication Detected", "Thank You", JOptionPane.WARNING_MESSAGE);
            //e.printStackTrace();
        }

        /*
         
         */
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        try {
            SimpleDateFormat sdf = new SimpleDateFormat("E MMM dd yyyy");
            String mod_date = sdf.format(jCalendar1.getDate());
            String status_checking = null;
            ResultSet rs;
            Connection con = db.getDBCon();
            Statement st;
            String d = sdf.format(jCalendar1.getDate());
            String sql = "select status from petrol where NIC='" + nic.getText() + "' AND date='" + d + "'";
            st = con.createStatement();
            rs = st.executeQuery(sql);
            while (rs.next()) {
                status_checking = rs.getString("status");
            }
            System.out.println(status_checking);
            System.out.println(mod_date);

            if (status_checking.equals("booking")) {
                db.iud("delete from petrol where NIC='" + nic.getText() + "' AND date='" + mod_date + "' AND status='booking'");
                JOptionPane.showMessageDialog(rootPane, "Delete Succesfully", "Thank You", JOptionPane.WARNING_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(rootPane, "Your Booking expired", "Thank You", JOptionPane.WARNING_MESSAGE);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Delete Fail", "Thank You", JOptionPane.WARNING_MESSAGE);

            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        try {
            String good_type=pno.getText();
            if (good_type.equals("MAIL")) {
            validate_nic();
            validate_time(); 
            validate_date();
            Date d = new Date();
            SimpleDateFormat sdf = new SimpleDateFormat("hh:mm:ss");
            String start1 = sdf.format(stime.getValue());
            String end1 = sdf.format(etime.getValue());

            String wagon = "";
            if (wg1.isSelected()) {
                wagon = "Four Wheeled Wagon" + "|";
            }
            if (wg2.isSelected()) {
                wagon += "8 Wheel Wagon [up to 28 tones]" + "|";
            }
            if (wg3.isSelected()) {
                wagon += "8 Wheel Wagon [up to 39.6 tones]" + "|";
            }
            if (wg4.isSelected()) {
                wagon += "8 Wheel Wagon [above 39.6 tones]" + "|";
            }

            String cls = "";
            if (class1.isSelected()) {
                cls = "Class 1(Raw Material)";

            } else {
                cls = "Class 2(Bulk Goods)";
            }
            String class_state = "";
            if (cls1_below.isSelected()) {
                class_state = "Below Rabukkana";
            } else {
                class_state = "Above Rabukkana";
            }
            String class1_state = "";
            if (cls2_below.isSelected()) {
                class_state = "Below Rabukkana";
            } else {
                class_state = "Above Rabukkana";
            }

            SimpleDateFormat sdf1 = new SimpleDateFormat("E MMM dd yyyy");
            String mod_date = sdf1.format(jCalendar1.getDate());
            if (!(nic.getText().isEmpty())) {

                db.iud("insert into mail (NIC,date,source,destination,wagon, permit_no, good, purpose, sender_name, sender_addr, res_name,"
                        + " res_addr, start_time, end_time, class, ton, km, fare, authorize,4_wheel,8_wheel_1,8_wheel_2,8_wheel_3,status)values"
                        + " ('" + nic.getText() + "','" + mod_date + "','" + starts.getSelectedItem().toString() + "',"
                        + "'" + ends.getSelectedItem().toString() + "','" + wagon + "',"
                        + "'" + pno.getText() + "','" + type.getText() + "','" + purpose.getText() + "',"
                        + "'" + name.getText() + "','" + add.getText() + "','" + rname.getText() + "','" + raddress.getText() + "','" + start1 + "',"
                        + "'" + end1 + "',"
                        + "'" + cls + "','" + ton.getValue() + "','" + km.getValue() + "','" + fare.getText() + "','" + authorize.getText() + "',"
                        + "'" + Integer.parseInt(wagon_count1.getText()) + "','" + Integer.parseInt(wagon_count2.getText()) + "',"
                        + "'" + Integer.parseInt(wagon_count3.getText()) + "',"
                        + "'" + Integer.parseInt(wagon_count4.getText()) + "','booking')");

                JOptionPane.showMessageDialog(rootPane, "Data Insert Successfully", "Thank You", JOptionPane.WARNING_MESSAGE);
             }
            }else{
                JOptionPane.showMessageDialog(rootPane, "We can insert only Mail Details", "Thank You", JOptionPane.WARNING_MESSAGE);
            }
        } catch (Exception e) {

            JOptionPane.showMessageDialog(rootPane, "Cant Insert Succesfully Duplication Detected", "Thank You", JOptionPane.WARNING_MESSAGE);
            //e.printStackTrace();
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed

        try {
            SimpleDateFormat sdf = new SimpleDateFormat("E MMM dd yyyy");
            String mod_date = sdf.format(jCalendar1.getDate());
            String status_checking = null;
            ResultSet rs;
            Connection con = db.getDBCon();
            Statement st;
            String d = sdf.format(jCalendar1.getDate());
            String sql = "select status from mail where NIC='" + nic.getText() + "' AND date='" + d + "'";
            st = con.createStatement();
            rs = st.executeQuery(sql);
            while (rs.next()) {
                status_checking = rs.getString("status");
            }
            System.out.println(status_checking);
            System.out.println(mod_date);

            if (status_checking.equals("booking")) {
                db.iud("delete from mail where NIC='" + nic.getText() + "' AND date='" + mod_date + "' AND status='booking'");
                JOptionPane.showMessageDialog(rootPane, "Delete Succesfully", "Thank You", JOptionPane.WARNING_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(rootPane, "Your Booking expired", "Thank You", JOptionPane.WARNING_MESSAGE);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Delete Fail", "Thank You", JOptionPane.WARNING_MESSAGE);

            e.printStackTrace();
        }

        /*
         try {
         SimpleDateFormat sdf = new SimpleDateFormat("E MMM dd yyyy");
         String mod_date = sdf.format(jCalendar1.getDate());
         db.iud("delete from mail where NIC='" + nic.getText() + "' AND date='" + mod_date + "'");
         JOptionPane.showMessageDialog(rootPane, "Delete Succesfully", "Thank You", JOptionPane.WARNING_MESSAGE);

         } catch (Exception e) {
         JOptionPane.showMessageDialog(rootPane, "Delete Fail", "Thank You", JOptionPane.WARNING_MESSAGE);

         //  e.printStackTrace();
         }
         */
    }//GEN-LAST:event_jButton9ActionPerformed

    private void wg1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wg1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_wg1ActionPerformed

    private void wg1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_wg1PropertyChange

    }//GEN-LAST:event_wg1PropertyChange

    private void wg2PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_wg2PropertyChange

    }//GEN-LAST:event_wg2PropertyChange

    private void wg2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_wg2ItemStateChanged

    }//GEN-LAST:event_wg2ItemStateChanged

    private void wg2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_wg2MouseClicked
        try {
            if (wg2.isSelected()) {
                //JOptionPane.showMessageDialog(null, "select");
                wagon_count2.setVisible(true);

            } else {
                //JOptionPane.showMessageDialog(null, "not select");
                wagon_count2.setVisible(false);
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_wg2MouseClicked

    private void wg3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_wg3MouseClicked
        try {
            if (wg3.isSelected()) {
                //JOptionPane.showMessageDialog(null, "select");
                wagon_count3.setVisible(true);

            } else {
                //JOptionPane.showMessageDialog(null, "not select");
                wagon_count3.setVisible(false);
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_wg3MouseClicked

    private void wg4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_wg4MouseClicked
        try {
            if (wg4.isSelected()) {
                //JOptionPane.showMessageDialog(null, "select");
                wagon_count4.setVisible(true);

            } else {
                //JOptionPane.showMessageDialog(null, "not select");
                wagon_count4.setVisible(false);
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_wg4MouseClicked

    private void wg1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_wg1MouseClicked
        try {
            if (wg1.isSelected()) {
                //JOptionPane.showMessageDialog(null, "select");
                wagon_count1.setVisible(true);

            } else {
                //JOptionPane.showMessageDialog(null, "not select");
                wagon_count1.setVisible(false);
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_wg1MouseClicked
    public int four_wheel = 20;
    public int eight_wheel = 20;
    public int eight_wheel_up = 20;
    public int eight_wheel_above = 20;

    private void wagon_count1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_wagon_count1KeyReleased
        try {

            int db_booking_4wheel = 0;

            ResultSet rs;
            Statement st;
            Connection con = db.getDBCon();
            st = con.createStatement();
            String sql = "Select * from good_transportation where status='booking'";
            rs = st.executeQuery(sql);
            while (rs.next()) {
                db_booking_4wheel += Integer.parseInt(rs.getString("4_wheel"));
            }
            rs.close();

            ResultSet rs1 = null;
            Statement st1;
            Connection con1 = db.getDBCon();
            st1 = con1.createStatement();
            String sql1 = "Select * from petrol where status='booking'";
            rs1 = st1.executeQuery(sql1);
            while (rs1.next()) {
                db_booking_4wheel += Integer.parseInt(rs1.getString("4_wheel"));
            }
            rs1.close();

            ResultSet rs2 = null;
            Statement st2;
            Connection con2 = db.getDBCon();
            st2 = con2.createStatement();
            String sql2 = "Select * from mail where status='booking'";
            rs2 = st2.executeQuery(sql2);
            while (rs2.next()) {
                db_booking_4wheel += Integer.parseInt(rs2.getString("4_wheel"));
            }
            rs2.close();

            int balance = 0;
            int ava_balance = 0;
            rs = st.executeQuery(sql);

            int wg_count = Integer.parseInt(wagon_count1.getText());
            ava_balance = four_wheel - db_booking_4wheel;

            if (wg_count <= ava_balance) {
                balance = ava_balance - wg_count;
                wlbl1.setText("Remaining wagon count = " + balance);
            } else {
                JOptionPane.showMessageDialog(null, "Insufficient Balance", "Sorry", JOptionPane.ERROR_MESSAGE);
                wlbl1.setText("0");
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_wagon_count1KeyReleased

    private void wagon_count2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_wagon_count2KeyReleased
        try {

            int db_booking_8wheel = 0;

            ResultSet rs;
            Statement st;
            Connection con = db.getDBCon();
            st = con.createStatement();
            String sql = "Select * from good_transportation where status='booking'";
            rs = st.executeQuery(sql);
            while (rs.next()) {
                db_booking_8wheel += Integer.parseInt(rs.getString("8_wheel_1"));
            }
            rs.close();

            ResultSet rs1 = null;
            Statement st1;
            Connection con1 = db.getDBCon();
            st1 = con1.createStatement();
            String sql1 = "Select * from petrol where status='booking'";
            rs1 = st1.executeQuery(sql1);
            while (rs1.next()) {
                db_booking_8wheel += Integer.parseInt(rs1.getString("8_wheel_1"));
            }
            rs1.close();

            ResultSet rs2 = null;
            Statement st2;
            Connection con2 = db.getDBCon();
            st2 = con2.createStatement();
            String sql2 = "Select * from mail where status='booking'";
            rs2 = st2.executeQuery(sql2);
            while (rs2.next()) {
                db_booking_8wheel += Integer.parseInt(rs2.getString("8_wheel_1"));
            }
            rs2.close();

            int balance = 0;
            int ava_balance = 0;
            rs = st.executeQuery(sql);

            int wg_count = Integer.parseInt(wagon_count2.getText());
            ava_balance = eight_wheel - db_booking_8wheel;

            if (wg_count <= ava_balance) {
                balance = ava_balance - wg_count;
                wlbl2.setText("Remaining wagon count = " + balance);
            } else {
                JOptionPane.showMessageDialog(null, "Insufficient Balance", "Sorry", JOptionPane.ERROR_MESSAGE);
                wlbl2.setText("0");
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_wagon_count2KeyReleased

    private void wagon_count3KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_wagon_count3KeyReleased
        try {

            int db_booking_8wheel2 = 0;

            ResultSet rs;
            Statement st;
            Connection con = db.getDBCon();
            st = con.createStatement();
            String sql = "Select * from good_transportation where status='booking'";
            rs = st.executeQuery(sql);
            while (rs.next()) {
                db_booking_8wheel2 += Integer.parseInt(rs.getString("8_wheel_2"));
            }
            rs.close();

            ResultSet rs1 = null;
            Statement st1;
            Connection con1 = db.getDBCon();
            st1 = con1.createStatement();
            String sql1 = "Select * from petrol where status='booking'";
            rs1 = st1.executeQuery(sql1);
            while (rs1.next()) {
                db_booking_8wheel2 += Integer.parseInt(rs1.getString("8_wheel_2"));
            }
            rs1.close();

            ResultSet rs2 = null;
            Statement st2;
            Connection con2 = db.getDBCon();
            st2 = con2.createStatement();
            String sql2 = "Select * from mail where status='booking'";
            rs2 = st2.executeQuery(sql2);
            while (rs2.next()) {
                db_booking_8wheel2 += Integer.parseInt(rs2.getString("8_wheel_2"));
            }
            rs2.close();

            int balance = 0;
            int ava_balance = 0;
            rs = st.executeQuery(sql);

            int wg_count = Integer.parseInt(wagon_count3.getText());
            ava_balance = eight_wheel_up - db_booking_8wheel2;

            if (wg_count <= ava_balance) {
                balance = ava_balance - wg_count;
                wlbl3.setText("Remaining wagon count = " + balance);
            } else {
                JOptionPane.showMessageDialog(null, "Insufficient Balance", "Sorry", JOptionPane.ERROR_MESSAGE);
                wlbl3.setText("0");
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_wagon_count3KeyReleased

    private void wagon_count4KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_wagon_count4KeyReleased
        try {

            int db_booking_8wheel3 = 0;

            ResultSet rs;
            Statement st;
            Connection con = db.getDBCon();
            st = con.createStatement();
            String sql = "Select * from good_transportation where status='booking'";
            rs = st.executeQuery(sql);
            while (rs.next()) {
                db_booking_8wheel3 += Integer.parseInt(rs.getString("8_wheel_3"));
            }
            rs.close();

            ResultSet rs1 = null;
            Statement st1;
            Connection con1 = db.getDBCon();
            st1 = con1.createStatement();
            String sql1 = "Select * from petrol where status='booking'";
            rs1 = st1.executeQuery(sql1);
            while (rs1.next()) {
                db_booking_8wheel3 += Integer.parseInt(rs1.getString("8_wheel_3"));
            }
            rs1.close();

            ResultSet rs2 = null;
            Statement st2;
            Connection con2 = db.getDBCon();
            st2 = con2.createStatement();
            String sql2 = "Select * from mail where status='booking'";
            rs2 = st2.executeQuery(sql2);
            while (rs2.next()) {
                db_booking_8wheel3 += Integer.parseInt(rs2.getString("8_wheel_3"));
            }
            rs2.close();

            int balance = 0;
            int ava_balance = 0;
            rs = st.executeQuery(sql);

            int wg_count = Integer.parseInt(wagon_count4.getText());
            ava_balance = eight_wheel_above - db_booking_8wheel3;

            if (wg_count <= ava_balance) {
                balance = ava_balance - wg_count;
                wlbl4.setText("Remaining wagon count = " + balance);
            } else {
                JOptionPane.showMessageDialog(null, "Insufficient Balance", "Sorry", JOptionPane.ERROR_MESSAGE);
                wlbl4.setText("0");
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_wagon_count4KeyReleased

    private void nicKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nicKeyPressed
        try {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                pno.grabFocus();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_nicKeyPressed

    private void pnoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pnoKeyPressed
        try {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                type.grabFocus();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_pnoKeyPressed

    private void typeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_typeKeyPressed
        try {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                purpose.grabFocus();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_typeKeyPressed

    private void purposeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_purposeKeyPressed
        try {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                name.grabFocus();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_purposeKeyPressed

    private void nameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nameKeyPressed
        try {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                add.grabFocus();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_nameKeyPressed

    private void addKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_addKeyPressed
        try {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                rname.grabFocus();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_addKeyPressed

    private void rnameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rnameKeyPressed
        try {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                raddress.grabFocus();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_rnameKeyPressed

    private void raddressKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_raddressKeyPressed
        try {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

                line.grabFocus();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_raddressKeyPressed

    private void lineKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lineKeyPressed
        try {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

                starts.grabFocus();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_lineKeyPressed

    private void line1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_line1KeyReleased
        
    }//GEN-LAST:event_line1KeyReleased

    private void startsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_startsKeyPressed
        try {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

               line1.grabFocus();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_startsKeyPressed

    private void wagon_count1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_wagon_count1KeyPressed
        try {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                wagon_count2.grabFocus();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_wagon_count1KeyPressed

    private void wagon_count2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wagon_count2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_wagon_count2ActionPerformed

    private void wagon_count2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_wagon_count2KeyPressed
        try {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                wagon_count3.grabFocus();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_wagon_count2KeyPressed

    private void wagon_count3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_wagon_count3KeyPressed
        try {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                wagon_count4.grabFocus();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_wagon_count3KeyPressed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        try {
            Connection con;
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/railway", "root", "123");
//C:\Users\Gunesh Madusanka\Documents\NetBeansProjects\Railway Reservation System\src\railway\reservation\system\good_transportation_petrol_sub_report.jrxml
            //JasperDesign jdesign = JRXmlLoader.load("C:\\Users\\Gunesh Madusanka\\Documents\\NetBeansProjects\\Railway Reservation System\\src\\railway\\reservation\\system\\good_transportation_full_1.jrxml");
       JasperDesign jdesign = JRXmlLoader.load("C:\\Users\\Gunesh Madusanka\\Documents\\NetBeansProjects\\Railway Reservation System\\src\\railway\\reservation\\system\\good_transportation_full_1.jrxml");

            
            String sql = "select * from good_transportation";

            JRDesignQuery updateQuery = new JRDesignQuery();
            updateQuery.setText(sql);
            jdesign.setQuery(updateQuery);
            JasperReport jreport = JasperCompileManager.compileReport(jdesign);
            JasperPrint jPrint = JasperFillManager.fillReport(jreport, null, con);

            JasperViewer.viewReport(jPrint);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
    try {
            Connection con;
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/railway", "root", "123");

            JasperDesign jdesign = JRXmlLoader.load("C:\\Users\\Gunesh Madusanka\\Documents\\NetBeansProjects\\Railway Reservation System\\src\\railway\\reservation\\system\\good_transportation_full.jrxml");
            String sql = "select * from good_transportation";

            JRDesignQuery updateQuery = new JRDesignQuery();
            updateQuery.setText(sql);
            jdesign.setQuery(updateQuery);
            JasperReport jreport = JasperCompileManager.compileReport(jdesign);
            JasperPrint jPrint = JasperFillManager.fillReport(jreport, null, con);

            JasperViewer.viewReport(jPrint);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton11ActionPerformed

    private void line1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_line1KeyPressed
        try {
           if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                 ends.grabFocus();
            } 
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_line1KeyPressed

    private void jLabel15MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel15MouseClicked
      dispose();
    }//GEN-LAST:event_jLabel15MouseClicked

    private void kGradientPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_kGradientPanel1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_kGradientPanel1MouseClicked

    private void kGradientPanel1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_kGradientPanel1MouseDragged
          int xx = evt.getXOnScreen();
        int yy = evt.getYOnScreen();
        this.setLocation(xx - x, yy - y);
    }//GEN-LAST:event_kGradientPanel1MouseDragged

    private void kGradientPanel1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_kGradientPanel1MousePressed
          x = evt.getX();
        y = evt.getY();
    }//GEN-LAST:event_kGradientPanel1MousePressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(wagon_transportation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(wagon_transportation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(wagon_transportation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(wagon_transportation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new wagon_transportation().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField add;
    private javax.swing.JTextField authorize;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.JRadioButton class1;
    private javax.swing.JRadioButton class2;
    private javax.swing.JRadioButton cls1_above;
    private javax.swing.JRadioButton cls1_below;
    private javax.swing.JRadioButton cls2_above;
    private javax.swing.JRadioButton cls2_below;
    private javax.swing.JComboBox ends;
    private javax.swing.JSpinner etime;
    private javax.swing.JTextField fare;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private com.toedter.calendar.JCalendar jCalendar1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private keeptoo.KGradientPanel kGradientPanel1;
    private keeptoo.KGradientPanel kGradientPanel2;
    private keeptoo.KGradientPanel kGradientPanel3;
    private com.toedter.components.JSpinField km;
    private javax.swing.JComboBox line;
    private javax.swing.JComboBox line1;
    private javax.swing.JTextField name;
    private javax.swing.JTextField nic;
    private javax.swing.JTextField pno;
    private javax.swing.JTextField purpose;
    private javax.swing.JTextField raddress;
    private javax.swing.JTextField rname;
    private javax.swing.JComboBox starts;
    private javax.swing.JSpinner stime;
    private com.toedter.components.JSpinField ton;
    private javax.swing.JTextField type;
    private javax.swing.JTextField wagon_count1;
    private javax.swing.JTextField wagon_count2;
    private javax.swing.JTextField wagon_count3;
    private javax.swing.JTextField wagon_count4;
    private javax.swing.JCheckBox wg1;
    private javax.swing.JCheckBox wg2;
    private javax.swing.JCheckBox wg3;
    private javax.swing.JCheckBox wg4;
    private javax.swing.JLabel wlbl1;
    private javax.swing.JLabel wlbl2;
    private javax.swing.JLabel wlbl3;
    private javax.swing.JLabel wlbl4;
    // End of variables declaration//GEN-END:variables
    private void status() {
        try {
            String now = null;
            String dbase = null;
            Date today = new Date();
           // today.getTime();

            ResultSet rs;
            Statement st;
            String sql = "select end_time from good_transportation where status='booking'";
            Connection con = db.getDBCon();
            st = con.createStatement();
            rs = st.executeQuery(sql);
            while (rs.next()) {
                dbase = rs.getString("end_time");
               
                SimpleDateFormat sdf = new SimpleDateFormat("hh:mm:ss");
                Date dbdate = sdf.parse(dbase);
                String today_check = sdf.format(today.getTime());
                Date today_cheeck1=sdf.parse(today_check);
          
                if (today_cheeck1.getTime() == dbdate.getTime() || today_cheeck1.getTime() >= dbdate.getTime()) {
                    db.iud("update good_transportation set status='available' where end_time='" + dbase + "'  ");
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void status1() {
        try {
            String now = null;
            String dbase = null;
            Date today = new Date();
            today.getTime();

            ResultSet rs;
            Statement st;
            String sql = "select end_time from petrol where status='booking'";
            Connection con = db.getDBCon();
            st = con.createStatement();
            rs = st.executeQuery(sql);
            while (rs.next()) {
                dbase = rs.getString("end_time");
                SimpleDateFormat sdf = new SimpleDateFormat("hh:mm:ss");
                Date dbdate = sdf.parse(dbase);
                
                String today_check = sdf.format(today.getTime());
                Date today_cheeck1=sdf.parse(today_check);
             
                if (today_cheeck1.getTime() == dbdate.getTime() || today_cheeck1.getTime() >= dbdate.getTime()) {

                    db.iud("update petrol set status='available' where end_time='" + dbase + "'  ");
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void status2() {
        try {
            String now = null;
            String dbase = null;
            Date today = new Date();
            today.getTime();

            ResultSet rs;
            Statement st;
            String sql = "select end_time from mail where status='booking'";
            Connection con = db.getDBCon();
            st = con.createStatement();
            rs = st.executeQuery(sql);
            while (rs.next()) {
                dbase = rs.getString("end_time");
                SimpleDateFormat sdf = new SimpleDateFormat("hh:mm:ss");
                Date dbdate = sdf.parse(dbase);
                
                String today_check = sdf.format(today.getTime());
                Date today_cheeck1=sdf.parse(today_check);
                
                if (today_cheeck1.getTime() == dbdate.getTime() || today_cheeck1.getTime() >= dbdate.getTime()) {

                    db.iud("update mail set status='available' where end_time='" + dbase + "'  ");
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void validate_nic() {
        try {
            if (!(nic.getText().matches("^[0-9]{9}[vV]$"))) {
                JOptionPane.showMessageDialog(null, "Invalid Input for NIC ", "Error", JOptionPane.ERROR_MESSAGE);
                nic.setBackground(Color.red);
                nic.setForeground(Color.WHITE);
                nic.setText(null);
            } else {
                nic.setBackground(Color.GREEN);
                nic.setForeground(Color.WHITE);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void validate_time() {
        try {  
            Date today=new Date();
             SimpleDateFormat sdf2 = new SimpleDateFormat("hh:mm:ss");
             
            String start_time=sdf2.format(stime.getValue());
            String end_time=sdf2.format(etime.getValue());
            Date s_time;
            Date e_time;
            try {
                s_time = sdf2.parse(start_time);
                e_time=sdf2.parse(end_time);
                if (s_time.getTime()>e_time.getTime()) {
                JOptionPane.showMessageDialog(null, "Wrong Time Inputs", null, JOptionPane.ERROR_MESSAGE);
                
               
                Date date=new Date();
                SpinnerModel sm=new SpinnerDateModel(date,null,null,Calendar.HOUR_OF_DAY);
                stime = new javax.swing.JSpinner(sm);
                JSpinner.DateEditor de1=new JSpinner.DateEditor(stime,"hh:mm:ssa");
                etime.setEditor(de1);
                etime.setBackground(Color.red);
                nic.setText(null);
                      
                //stime.setEditor(de1);
                        
                }
            } catch (ParseException ex) {
                ex.printStackTrace();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void validate_date() {
        try {
             Date dd=new Date();
            Date now = jCalendar1.getDate();
            if ( dd.getDate()> now.getDate()) {
                JOptionPane.showMessageDialog(null, "You can not booking for previous dates", null, JOptionPane.ERROR_MESSAGE);
                jCalendar1.setDate(dd);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

}
