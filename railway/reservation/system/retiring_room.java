/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package railway.reservation.system;

import com.sun.swing.internal.plaf.metal.resources.metal;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.plaf.metal.MetalLookAndFeel;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JRDesignQuery;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Gunesh Madusanka
 */
public class retiring_room extends javax.swing.JFrame {

    /**
     * Creates new form retiring_room
     */
    
       int x, y;
    public retiring_room() {
           try {
               initComponents();
               status();
               UIManager.setLookAndFeel("com.sun.java.swing.plaf.metal.MetalLookAndFeel");
           } catch (ClassNotFoundException ex) {
               Logger.getLogger(retiring_room.class.getName()).log(Level.SEVERE, null, ex);
           } catch (InstantiationException ex) {
               Logger.getLogger(retiring_room.class.getName()).log(Level.SEVERE, null, ex);
           } catch (IllegalAccessException ex) {
               Logger.getLogger(retiring_room.class.getName()).log(Level.SEVERE, null, ex);
           } catch (UnsupportedLookAndFeelException ex) {
               Logger.getLogger(retiring_room.class.getName()).log(Level.SEVERE, null, ex);
           }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        kGradientPanel1 = new keeptoo.KGradientPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        nic = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        visitors = new com.toedter.components.JSpinField();
        jLabel4 = new javax.swing.JLabel();
        days = new com.toedter.components.JSpinField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        type = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        station = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        vat = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        charge = new javax.swing.JTextField();
        facilities = new javax.swing.JComboBox();
        from = new com.toedter.calendar.JDateChooser();
        to = new com.toedter.calendar.JDateChooser();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        qty = new com.toedter.components.JSpinField();
        room = new javax.swing.JTextField();
        lbl = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jCalendar1 = new com.toedter.calendar.JCalendar();
        jLabel13 = new javax.swing.JLabel();
        kGradientPanel2 = new keeptoo.KGradientPanel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(255, 153, 153));
        setForeground(new java.awt.Color(255, 153, 153));
        setUndecorated(true);

        kGradientPanel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                kGradientPanel1MouseDragged(evt);
            }
        });
        kGradientPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                kGradientPanel1MousePressed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("                            RETIRING ROOM RESERVATION");

        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/shutdown_48px.png"))); // NOI18N
        jLabel14.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel14MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout kGradientPanel1Layout = new javax.swing.GroupLayout(kGradientPanel1);
        kGradientPanel1.setLayout(kGradientPanel1Layout);
        kGradientPanel1Layout.setHorizontalGroup(
            kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, kGradientPanel1Layout.createSequentialGroup()
                .addGap(114, 114, 114)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(67, 67, 67)
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        kGradientPanel1Layout.setVerticalGroup(
            kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jPanel1.setBackground(new java.awt.Color(204, 255, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel2.setText("Applicant NIC");

        nic.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nicKeyPressed(evt);
            }
        });

        jLabel3.setText("Number of Visitors");

        visitors.setFocusCycleRoot(true);

        jLabel4.setText("Days");

        days.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                daysMouseClicked(evt);
            }
        });

        jLabel5.setText("Charges For Rooms");

        jLabel6.setText("Room Type");

        type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Double Rooms", "Family Rooms", "Single Rooms" }));
        type.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                typeItemStateChanged(evt);
            }
        });

        jLabel7.setText("Station");

        station.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Station", "Kandy", "Polonnaruwa", "Batticaloa", "Anuradhapura", "Mihintale", "Trincomalee", "Galle", "Jaffna" }));
        station.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                stationItemStateChanged(evt);
            }
        });

        jLabel8.setText("Facilities");

        jLabel9.setText(" Room Quantity");

        jLabel10.setText("VAT");

        vat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vatActionPerformed(evt);
            }
        });

        jButton1.setText("Calculate Room Charge");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        facilities.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Two Beds A/C", "Two Beds Non A/C", "Double Bed Non A/C", "Five Beds A/C", "Five Beds Non A/C", "Single Bed Non A/C", "Three Beds Non A/C", "Triple Beds Non A/C", "Three Beds A/C", "Family Room A/C", "Double Room Non A/C\t" }));
        facilities.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                facilitiesItemStateChanged(evt);
            }
        });

        jLabel11.setText("Date From");

        jLabel12.setText("Date To");

        jButton5.setText("GET DATE");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        qty.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                qtyFocusGained(evt);
            }
        });
        qty.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                qtyMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                qtyMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                qtyMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                qtyMousePressed(evt);
            }
        });
        qty.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                qtyPropertyChange(evt);
            }
        });
        qty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                qtyKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                qtyKeyTyped(evt);
            }
        });

        room.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                roomMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                roomMouseEntered(evt);
            }
        });
        room.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                roomKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                roomKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(from, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(to, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(nic, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addGap(120, 120, 120)
                            .addComponent(visitors, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(days, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(station, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(type, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(qty, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(facilities, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(vat, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(charge, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(jLabel11))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(jLabel12))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(jLabel5))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(jLabel4))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(jLabel7))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(jLabel6))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(jLabel8))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10)
                            .addComponent(jButton1))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(114, 114, 114)
                                .addComponent(lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(211, 211, 211)
                                .addComponent(room, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(visitors, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(from, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(to, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5)
                    .addComponent(jLabel5))
                .addGap(37, 37, 37)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(days, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(station, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(facilities, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(room, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(qty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(vat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(charge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jPanel2.setBackground(new java.awt.Color(153, 255, 204));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jCalendar1.setBackground(new java.awt.Color(204, 204, 255));

        jLabel13.setText("Reservation Date");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCalendar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCalendar1, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        kGradientPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        kGradientPanel2.setkEndColor(new java.awt.Color(0, 102, 102));
        kGradientPanel2.setkStartColor(new java.awt.Color(204, 255, 204));

        jButton2.setBackground(new java.awt.Color(255, 255, 204));
        jButton2.setText("CHECK IN");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("UPDATE CHECK DETAILS");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("BILL GENERATE");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton6.setText("CANCEL RESERVATION");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("COMPLETE REPORT GENERATE ");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout kGradientPanel2Layout = new javax.swing.GroupLayout(kGradientPanel2);
        kGradientPanel2.setLayout(kGradientPanel2Layout);
        kGradientPanel2Layout.setHorizontalGroup(
            kGradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kGradientPanel2Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(kGradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(kGradientPanel2Layout.createSequentialGroup()
                        .addGroup(kGradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                        .addGroup(kGradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(22, 22, 22))
        );
        kGradientPanel2Layout.setVerticalGroup(
            kGradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kGradientPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(kGradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(kGradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(kGradientPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addComponent(kGradientPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(kGradientPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(kGradientPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public int counts = 0;

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            String sta = station.getSelectedItem().toString();
            String room_type = type.getSelectedItem().toString();
            String facility = facilities.getSelectedItem().toString();
            int fare = 0;
            int tax = Integer.parseInt(vat.getText());
            if (sta.equals("Kandy")) {
                if (room_type.equals("Double rooms-K")) {
                    if (facility.equals("Two beds non AC")) {
                        counts = 4;

                        fare = 1000 * qty.getValue() * days.getValue();
                        tax = fare / 100 * tax;
                        fare += tax;
                        charge.setText(String.valueOf(fare));
                    }
                }
                if (room_type.equals("Family rooms-K")) {
                    if (facility.equals("Three beds non AC")) {
                        counts = 1;

                        fare = 1200 * qty.getValue() * days.getValue();
                        tax = fare / 100 * tax;
                        fare += tax;
                        charge.setText(String.valueOf(fare));

                    }
                }
            }
            if (sta.equals("Polonnaruwa")) {
                if (room_type.equals("Double rooms-P")) {
                    if (facility.equals("Two beds non AC")) {
                        counts = 17;

                        fare = 1500 * qty.getValue() * days.getValue();
                        tax = fare / 100 * tax;
                        fare += tax;
                        charge.setText(String.valueOf(fare));
                    }
                }
                if (room_type.equals("Family rooms-P")) {
                    if (facility.equals("Three beds non AC")) {
                        counts = 1;

                        fare = 2500 * qty.getValue() * days.getValue();
                        tax = fare / 100 * tax;
                        fare += tax;
                        charge.setText(String.valueOf(fare));

                    }
                }
            }
            if (sta.equals("Anuradhapura")) {
                if (room_type.equals("Single rooms-A")) {
                    if (facility.equals("Single beds")) {
                        counts = 14;

                        fare = 900 * qty.getValue() * days.getValue();
                        tax = fare / 100 * tax;
                        fare += tax;
                        charge.setText(String.valueOf(fare));
                    }
                }
                if (room_type.equals("Double rooms-A")) {
                    if (facility.equals("Two beds AC")) {
                        counts = 1;

                        fare = 2250 * qty.getValue() * days.getValue();
                        tax = fare / 100 * tax;
                        fare += tax;
                        charge.setText(String.valueOf(fare));
                    }
                    if (facility.equals("Two beds non AC")) {
                        counts = 4;

                        fare = 1000 * qty.getValue() * days.getValue();
                        tax = fare / 100 * tax;
                        fare += tax;
                        charge.setText(String.valueOf(fare));
                    }
                    if (facility.equals("Double beds non AC")) {
                        counts = 4;

                        fare = 1500 * qty.getValue() * days.getValue();
                        tax = fare / 100 * tax;
                        fare += tax;
                        charge.setText(String.valueOf(fare));
                    }
                }
                if (room_type.equals("Family rooms-A")) {
                    if (facility.equals("Five beds AC")) {
                        counts = 1;

                        fare = 3750 * qty.getValue() * days.getValue();
                        tax = fare / 100 * tax;
                        fare += tax;
                        charge.setText(String.valueOf(fare));

                    }
                    if (facility.equals("Five beds non AC")) {
                        counts = 2;

                        fare = 2500 * qty.getValue() * days.getValue();
                        tax = fare / 100 * tax;
                        fare += tax;
                        charge.setText(String.valueOf(fare));

                    }
                }
            }

            if (sta.equals("Batticaloa")) {
                if (room_type.equals("Double rooms-B")) {

                    if (facility.equals("Two beds AC")) {
                        counts = 2;

                        fare = 2250 * qty.getValue() * days.getValue();
                        tax = fare / 100 * tax;
                        fare += tax;
                        charge.setText(String.valueOf(fare));
                    }
                    if (facility.equals("Two beds non AC")) {
                        counts = 2;

                        fare = 1500 * qty.getValue() * days.getValue();
                        tax = fare / 100 * tax;
                        fare += tax;
                        charge.setText(String.valueOf(fare));
                    }
                }
                if (room_type.equals("Family rooms-B")) {
                    if (facility.equals("Triple beds non AC")) {
                        counts = 1;

                        fare = 2500 * qty.getValue() * days.getValue();
                        tax = fare / 100 * tax;
                        fare += tax;
                        charge.setText(String.valueOf(fare));

                    }
                }
            }
            if (sta.equals("Galle")) {
                if (room_type.equals("Single rooms-G")) {
                    if (facility.equals("Single beds non AC")) {
                        counts = 2;

                        fare = 850 * qty.getValue() * days.getValue();
                        tax = fare / 100 * tax;
                        fare += tax;
                        charge.setText(String.valueOf(fare));
                    }
                }
                if (room_type.equals("Double rooms-G")) {
                    if (facility.equals("Two beds AC")) {
                        counts = 1;

                        fare = 2250 * qty.getValue() * days.getValue();
                        tax = fare / 100 * tax;
                        fare += tax;
                        charge.setText(String.valueOf(fare));
                    }
                    if (facility.equals("Two beds non AC")) {
                        counts = 4;

                        fare = 1000 * qty.getValue() * days.getValue();
                        tax = fare / 100 * tax;
                        fare += tax;
                        charge.setText(String.valueOf(fare));
                    }

                }
                if (room_type.equals("Family rooms-G")) {
                    if (facility.equals("Three beds non AC")) {
                        counts = 1;

                        fare = 1200 * qty.getValue() * days.getValue();
                        tax = fare / 100 * tax;
                        fare += tax;
                        charge.setText(String.valueOf(fare));
                    }
                }
            }

            if (sta.equals("Mihintale")) {
                if (room_type.equals("Double rooms-M")) {

                    if (facility.equals("Two beds non AC")) {
                        counts = 6;

                        fare = 1000 * qty.getValue() * days.getValue();
                        tax = fare / 100 * tax;
                        fare += tax;
                        charge.setText(String.valueOf(fare));
                    }
                }
                if (room_type.equals("Family rooms-M")) {
                    if (facility.equals("Three beds non AC")) {
                        counts = 2;

                        fare = 1200 * qty.getValue() * days.getValue();
                        tax = fare / 100 * tax;
                        fare += tax;
                        charge.setText(String.valueOf(fare));
                    }
                }
            }

            if (sta.equals("Jaffna")) {
                if (room_type.equals("Single rooms-J")) {
                    if (facility.equals("Single beds non AC")) {
                        counts = 2;

                        fare = 975 * qty.getValue() * days.getValue();
                        tax = fare / 100 * tax;
                        fare += tax;
                        charge.setText(String.valueOf(fare));
                    }
                }

                if (room_type.equals("Double rooms-J")) {
                    if (facility.equals("Two beds with AC")) {
                        counts = 5;

                        fare = 3000 * qty.getValue() * days.getValue();
                        tax = fare / 100 * tax;
                        fare += tax;
                        charge.setText(String.valueOf(fare));
                    }
                    if (facility.equals("Two beds without AC")) {
                        counts = 5;

                        fare = 1500 * qty.getValue() * days.getValue();
                        tax = fare / 100 * tax;
                        fare += tax;
                        charge.setText(String.valueOf(fare));
                    }
                }
                if (room_type.equals("Family rooms-J")) {
                    if (facility.equals("Three beds with AC")) {
                        counts = 2;

                        fare = 5000 * qty.getValue() * days.getValue();
                        tax = fare / 100 * tax;
                        fare += tax;
                        charge.setText(String.valueOf(fare));

                    }
                    if (facility.equals("Three beds without AC")) {
                        counts = 2;

                        fare = 2500 * qty.getValue() * days.getValue();
                        tax = fare / 100 * tax;
                        fare += tax;
                        charge.setText(String.valueOf(fare));

                    }
                }
            }

            if (sta.equals("Trincomalee")) {
                if (room_type.equals("Double rooms-T")) {
                    if (facility.equals("non AC")) {
                        counts = 4;

                        fare = 1000 * qty.getValue() * days.getValue();
                        tax = fare / 100 * tax;
                        fare += tax;
                        charge.setText(String.valueOf(fare));
                    }
                }
                if (room_type.equals("Family rooms-T")) {
                    if (facility.equals("AC")) {
                        counts = 1;

                        fare = 2500 * qty.getValue() * days.getValue();
                        tax = fare / 100 * tax;
                        fare += tax;
                        charge.setText(String.valueOf(fare));

                    }
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            valid_nic();

            SimpleDateFormat sdf = new SimpleDateFormat("E MMM dd yyyy");
            String date_now = sdf.format(jCalendar1.getDate());
            String from_ = sdf.format(from.getDate());
            String to_ = sdf.format(to.getDate());
            String available = null;
            String vats = vat.getName();
            

            // if (ava.getText().equals("not available")) {
            //    System.out.println("1");
            //    JOptionPane.showMessageDialog(null, "Rooms not Available", "Thank You", JOptionPane.ERROR_MESSAGE);
            // }
            if (!(nic.getText().isEmpty())) {
                db.iud("insert into retiring_room (NIC, date, num_of_visitors, date_from, date_to, room_type, faciities, room_no, availability, VAT, charges, station)"
                    + " values ('" + nic.getText() + "','" + date_now + "','" + visitors.getValue() + "','" + from_ + "','" + to_ + "',"
                    + "'" + type.getSelectedItem().toString() + "','" + facilities.getSelectedItem().toString() + "','" + Integer.parseInt(room.getText()) + "',"
                    + "'" + "booking" + "','" + vat.getText() + "','" + Integer.parseInt(charge.getText()) + "','" + station.getSelectedItem().toString() + "')");
                JOptionPane.showMessageDialog(null, "Insert Successfully", "Thank You", JOptionPane.INFORMATION_MESSAGE);
            }
            else{
              //  JOptionPane.showMessageDialog(null, "Invalid input for NIC", "Thank You", JOptionPane.ERROR_MESSAGE);
            }
            

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void daysMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_daysMouseClicked

    }//GEN-LAST:event_daysMouseClicked

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        try {
            SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
            Date f_date = from.getDate();
            Date s_date = to.getDate();
            if (s_date.getTime() < f_date.getTime()) {
                JOptionPane.showMessageDialog(null, "wrong date input", null, JOptionPane.ERROR_MESSAGE);
            } else {
                long diffIn = Math.abs(s_date.getTime() - f_date.getTime());
                long diff = TimeUnit.DAYS.convert(diffIn, TimeUnit.MILLISECONDS);
                days.setValue((int) diff);
            }

            Date now = jCalendar1.getDate();
            if (f_date.getTime() < now.getTime()) {
                JOptionPane.showMessageDialog(null, "You can not booking for previous dates", null, JOptionPane.ERROR_MESSAGE);
                days.setValue(0);
            }
            // days.setText(String.valueOf(diff));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void stationItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_stationItemStateChanged
        try {
            room_refresh();

            String sta = station.getSelectedItem().toString();

            if (sta.equals("Anuradhapura")) {
                type.removeAllItems();
                type.addItem("Double rooms-A");
                type.addItem("Family rooms-A");
                type.addItem("Single rooms-A");
            }
            if (sta.equals("Kandy")) {
                type.removeAllItems();
                type.addItem("Double rooms-K");
                type.addItem("Family rooms-K");
            }

            if (sta.equals("Polonnaruwa")) {
                type.removeAllItems();
                type.addItem("Double rooms-P");
                type.addItem("Family rooms-P");
            }
            if (sta.equals("Batticaloa")) {
                type.removeAllItems();
                type.addItem("Double rooms-B");
                type.addItem("Family rooms-B");
            }
            if (sta.equals("Mihintale")) {
                type.removeAllItems();
                type.addItem("Double rooms-M");
                type.addItem("Family rooms-M");
            }
            if (sta.equals("Trincomalee")) {
                type.removeAllItems();
                type.addItem("Double rooms-T");
                type.addItem("Family rooms-T");
            }
            if (sta.equals("Galle")) {
                type.removeAllItems();
                type.addItem("Double rooms-G");
                type.addItem("Family rooms-G");
                type.addItem("Single rooms-G");
            }
            if (sta.equals("Jaffna")) {
                type.removeAllItems();
                type.addItem("Double rooms-J");
                type.addItem("Family rooms-J");
                type.addItem("Single rooms-J");
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_stationItemStateChanged

    private void typeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_typeItemStateChanged
        try {
            room_refresh();

            String typ = type.getSelectedItem().toString();
            if (typ.equals("Double rooms-A")) {
                facilities.removeAllItems();
                facilities.addItem("Two beds AC");
                facilities.addItem("Two beds non AC");
                facilities.addItem("Double beds non AC");
            }
            if (typ.equals("Family rooms-A")) {
                facilities.removeAllItems();
                facilities.addItem("Five beds AC");
                facilities.addItem("Five beds non AC");
            }
            if (typ.equals("Single rooms-A")) {
                facilities.removeAllItems();
                facilities.addItem("Single beds");
            }

            if (typ.equals("Double rooms-K")) {
                facilities.removeAllItems();
                facilities.addItem("Two beds non AC");

            }
            if (typ.equals("Family rooms-K")) {
                facilities.removeAllItems();
                facilities.addItem("Three beds non AC");
            }

            if (typ.equals("Double rooms-P")) {
                facilities.removeAllItems();
                facilities.addItem("Two beds non AC");

            }
            if (typ.equals("Family rooms-P")) {
                facilities.removeAllItems();
                facilities.addItem("Three beds non AC");
            }

            if (typ.equals("Double rooms-B")) {
                facilities.removeAllItems();
                facilities.addItem("Two beds AC");
                facilities.addItem("Two beds non AC");

            }
            if (typ.equals("Family rooms-B")) {
                facilities.removeAllItems();
                facilities.addItem("Triple beds non AC");
            }

            if (typ.equals("Double rooms-G")) {
                facilities.removeAllItems();
                facilities.addItem("Two beds AC");
                facilities.addItem("Two beds non AC");

            }
            if (typ.equals("Family rooms-G")) {
                facilities.removeAllItems();
                facilities.addItem("Three beds non AC");
            }
            if (typ.equals("Single rooms-G")) {
                facilities.removeAllItems();
                facilities.addItem("Single beds non AC");
            }

            if (typ.equals("Double rooms-M")) {
                facilities.removeAllItems();
                facilities.addItem("Two beds non AC");

            }
            if (typ.equals("Family rooms-M")) {
                facilities.removeAllItems();
                facilities.addItem("Three beds non AC");
            }

            if (typ.equals("Double rooms-J")) {
                facilities.removeAllItems();
                facilities.addItem("Two beds with AC");
                facilities.addItem("Two beds without AC");

            }
            if (typ.equals("Family rooms-J")) {
                facilities.removeAllItems();
                facilities.addItem("Three beds with AC");
                facilities.addItem("Three beds without AC");
            }
            if (typ.equals("Single rooms-J")) {
                facilities.removeAllItems();
                facilities.addItem("Single beds non AC");
            }

            if (typ.equals("Double rooms-T")) {
                facilities.removeAllItems();
                facilities.addItem("non AC");

            }
            if (typ.equals("Family rooms-T")) {
                facilities.removeAllItems();
                facilities.addItem("AC");
            }

        } catch (Exception e) {
            //e.printStackTrace();
        }
    }//GEN-LAST:event_typeItemStateChanged

    private void vatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vatActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_vatActionPerformed

    private void qtyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_qtyMouseClicked

    }//GEN-LAST:event_qtyMouseClicked

    private void qtyKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_qtyKeyPressed

    }//GEN-LAST:event_qtyKeyPressed

    private void qtyMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_qtyMousePressed

    }//GEN-LAST:event_qtyMousePressed

    private void qtyPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_qtyPropertyChange

    }//GEN-LAST:event_qtyPropertyChange

    private void qtyMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_qtyMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_qtyMouseEntered

    private void qtyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_qtyFocusGained

    }//GEN-LAST:event_qtyFocusGained

    private void qtyKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_qtyKeyTyped

    }//GEN-LAST:event_qtyKeyTyped

    private void qtyMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_qtyMouseExited

    }//GEN-LAST:event_qtyMouseExited

    private void facilitiesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_facilitiesItemStateChanged
        room_refresh();

    }//GEN-LAST:event_facilitiesItemStateChanged

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
             SimpleDateFormat sdf = new SimpleDateFormat("E MMM dd yyyy");
              String date_now = sdf.format(jCalendar1.getDate());
              String from_ = sdf.format(from.getDate());
              String to_ = sdf.format(to.getDate());
             
            
            //NIC, date, num_of_visitors, date_from, date_to, room_type, faciities, room_no, availability, VAT, charges, station
         //   db.iud("update retiring_room set date_to='"+to_+"' where NIC='"+Integer.parseInt(nic.getText())+"' AND date='"+date_now+"'");
         db.iud("update retiring_room set num_of_visitors='"+visitors.getValue()+"', date_from='"+from_+"',date_to='"+to_+"',room_type='"+type.getSelectedItem().toString()+"',"
                    + "faciities='"+facilities.getSelectedItem().toString()+"',room_no='"+Integer.parseInt(room.getText())+"',VAT='"+Integer.parseInt(vat.getText())+"',charges='"+Integer.parseInt(charge.getText())+"',"
                    + "station='"+station.getSelectedItem().toString()+"' where NIC='"+Integer.parseInt(nic.getText())+"' AND date='"+date_now+"'  ");
            JOptionPane.showMessageDialog(rootPane, "Update Successfull", "Thank you", JOptionPane.OK_OPTION);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
     try {
            SimpleDateFormat sdf = new SimpleDateFormat("E MMM dd yyyy");
            String date_now = sdf.format(jCalendar1.getDate());
            System.out.println(date_now);
            Connection con;
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/railway", "root", "123");

            JasperDesign jdesign = JRXmlLoader.load("C:\\Users\\Gunesh Madusanka\\Documents\\NetBeansProjects\\Railway Reservation System\\src\\railway\\reservation\\system\\retiring_custom.jrxml");
            String sql = "select * from retiring_room where NIC='"+Integer.parseInt(nic.getText())+"' AND date='"+date_now+"'";
            
            JRDesignQuery updateQuery = new JRDesignQuery();
            updateQuery.setText(sql);
            jdesign.setQuery(updateQuery);
            JasperReport jreport = JasperCompileManager.compileReport(jdesign);
            JasperPrint jPrint = JasperFillManager.fillReport(jreport, null, con);

            JasperViewer.viewReport(jPrint);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void roomMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_roomMouseClicked
        try {
            int total_room = qty.getValue();
            int booking_room = 0;
            int available_room = 0;
            String ava = null;

            Statement st;
            ResultSet rs;
            Connection con = db.getDBCon();
            st = con.createStatement();
//NIC, date, num_of_visitors, date_from, date_to, room_type, faciities, room_no, availability, VAT, charges, station
            String sql = "select * from retiring_room where room_type='" + type.getSelectedItem().toString() + "' AND faciities='" + facilities.getSelectedItem().toString() + "' AND station='" + station.getSelectedItem().toString() + "' AND availability='booking'  ";
            rs = st.executeQuery(sql);
                while (rs.next()) {
                booking_room += Integer.parseInt(rs.getString("room_no"));
            }
            lbl.setText(String.valueOf("Total Count=" + total_room + "   " + "Booking Count=" + booking_room));

   
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_roomMouseClicked

    private void roomKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_roomKeyPressed

    }//GEN-LAST:event_roomKeyPressed

    private void roomKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_roomKeyReleased
        try {
            int total_room = qty.getValue();
            int booking_room = 0;
            int available_room = 0;
            String ava = null;

            Statement st;
            ResultSet rs;
            Connection con = db.getDBCon();
            st = con.createStatement();
//NIC, date, num_of_visitors, date_from, date_to, room_type, faciities, room_no, availability, VAT, charges, station
            String sql = "select * from retiring_room where room_type='" + type.getSelectedItem().toString() + "' AND faciities='" + facilities.getSelectedItem().toString() + "' AND station='" + station.getSelectedItem().toString() + "' AND availability='booking'  ";
            rs = st.executeQuery(sql);
            while (rs.next()) {
                booking_room += Integer.parseInt(rs.getString("room_no"));

            }
            lbl.setText(String.valueOf("Total Count=" + total_room + "   " + "Booking Count=" + booking_room));
            available_room = total_room - booking_room;

            if (available_room < Integer.parseInt(room.getText()) || Integer.parseInt(room.getText()) <= 0 ) {
                jButton2.setVisible(false);
            } else {
                jButton2.setVisible(true);
            }
        } catch (Exception e) {
            //e.printStackTrace();
        }
    }//GEN-LAST:event_roomKeyReleased

    private void roomMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_roomMouseEntered
     // checking();
    }//GEN-LAST:event_roomMouseEntered

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        try {
            SimpleDateFormat sdf = new SimpleDateFormat("E MMM dd yyyy");
              String date_now = sdf.format(jCalendar1.getDate());
              
            String avacheck=null;
            ResultSet rs;
            Statement st;
            Connection con=db.getDBCon();
            String sql="Select * from retiring_room where availability='booking' AND  NIC='"+Integer.parseInt(nic.getText()) +"' AND date='"+date_now+"'";
            st=con.createStatement();
            rs=st.executeQuery(sql);
            
            while (rs.next()) {                
               avacheck=rs.getString("availability"); 
            }
            try {
                
                if (avacheck.equals("booking")) {
                   db.iud("delete from retiring_room where NIC='"+Integer.parseInt(nic.getText()) +"' AND date='"+date_now+"'");
                   JOptionPane.showMessageDialog(null, "Cancellation completed", "Thank You", JOptionPane.INFORMATION_MESSAGE);
                }
                    
            } catch (NullPointerException n) {
               // n.printStackTrace();
                JOptionPane.showMessageDialog(null, "This reservation already overdue.", "Sorry", JOptionPane.INFORMATION_MESSAGE);
            }
            
            
               
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
     try {
            SimpleDateFormat sdf = new SimpleDateFormat("E MMM dd yyyy");
            String date_now = sdf.format(jCalendar1.getDate());
            System.out.println(date_now);
            Connection con;
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/railway", "root", "123");

            JasperDesign jdesign = JRXmlLoader.load("C:\\Users\\Gunesh Madusanka\\Documents\\NetBeansProjects\\Railway Reservation System\\src\\railway\\reservation\\system\\retiring_custom.jrxml");
            String sql = "select * from retiring_room";
            
            JRDesignQuery updateQuery = new JRDesignQuery();
            updateQuery.setText(sql);
            jdesign.setQuery(updateQuery);
            JasperReport jreport = JasperCompileManager.compileReport(jdesign);
            JasperPrint jPrint = JasperFillManager.fillReport(jreport, null, con);

            JasperViewer.viewReport(jPrint);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void nicKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nicKeyPressed
       try {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
               // from.grabFocus();
              visitors.requestFocusInWindow();
               // from.requestFocus();
              // from.requestFocus(true);
             // from.setFocusCycleRoot(true);
             // from.setFocusCycleRoot(true);
                
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_nicKeyPressed

    private void jLabel14MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel14MouseClicked
        try {
            dispose();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_jLabel14MouseClicked

    private void kGradientPanel1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_kGradientPanel1MousePressed
        x = evt.getX();
        y = evt.getY();
    }//GEN-LAST:event_kGradientPanel1MousePressed

    private void kGradientPanel1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_kGradientPanel1MouseDragged
        int xx = evt.getXOnScreen();
        int yy = evt.getYOnScreen();
        this.setLocation(xx - x, yy - y);
    }//GEN-LAST:event_kGradientPanel1MouseDragged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(retiring_room.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(retiring_room.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(retiring_room.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(retiring_room.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new retiring_room().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField charge;
    private com.toedter.components.JSpinField days;
    private javax.swing.JComboBox facilities;
    private com.toedter.calendar.JDateChooser from;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private com.toedter.calendar.JCalendar jCalendar1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private keeptoo.KGradientPanel kGradientPanel1;
    private keeptoo.KGradientPanel kGradientPanel2;
    private javax.swing.JLabel lbl;
    private javax.swing.JTextField nic;
    private com.toedter.components.JSpinField qty;
    private javax.swing.JTextField room;
    private javax.swing.JComboBox station;
    private com.toedter.calendar.JDateChooser to;
    private javax.swing.JComboBox type;
    private javax.swing.JTextField vat;
    private com.toedter.components.JSpinField visitors;
    // End of variables declaration//GEN-END:variables

    private void room_refresh() {
        try {
            String sta = station.getSelectedItem().toString();
            String room_type = type.getSelectedItem().toString();
            String facility = facilities.getSelectedItem().toString();

            if (sta.equals("Kandy")) {
                if (room_type.equals("Double rooms-K")) {
                    if (facility.equals("Two beds non AC")) {
                        counts = 4;
                        qty.setValue(counts);
                    }
                }
                if (room_type.equals("Family rooms-K")) {
                    if (facility.equals("Three beds non AC")) {
                        counts = 1;
                        qty.setValue(counts);
                    }
                }
            }
            if (sta.equals("Polonnaruwa")) {
                if (room_type.equals("Double rooms-P")) {
                    if (facility.equals("Two beds non AC")) {
                        counts = 17;
                        qty.setValue(counts);
                    }
                }
                if (room_type.equals("Family rooms-P")) {
                    if (facility.equals("Three beds non AC")) {
                        counts = 1;
                        qty.setValue(counts);

                    }
                }
            }
            if (sta.equals("Anuradhapura")) {
                if (room_type.equals("Single rooms-A")) {
                    if (facility.equals("Single beds")) {
                        counts = 14;
                        qty.setValue(counts);
                    }
                }
                if (room_type.equals("Double rooms-A")) {
                    if (facility.equals("Two beds AC")) {
                        counts = 1;
                        qty.setValue(counts);
                    }
                    if (facility.equals("Two beds non AC")) {
                        counts = 4;
                        qty.setValue(counts);
                    }
                    if (facility.equals("Double beds non AC")) {
                        counts = 4;
                        qty.setValue(counts);
                    }
                }
                if (room_type.equals("Family rooms-A")) {
                    if (facility.equals("Five beds AC")) {
                        counts = 1;
                        qty.setValue(counts);

                    }
                    if (facility.equals("Five beds non AC")) {
                        counts = 2;
                        qty.setValue(counts);

                    }
                }
            }

            if (sta.equals("Batticaloa")) {
                if (room_type.equals("Double rooms-B")) {

                    if (facility.equals("Two beds AC")) {
                        counts = 2;
                        qty.setValue(counts);
                    }
                    if (facility.equals("Two beds non AC")) {
                        counts = 2;
                        qty.setValue(counts);
                    }
                }
                if (room_type.equals("Family rooms-B")) {
                    if (facility.equals("Triple beds non AC")) {
                        counts = 1;
                        qty.setValue(counts);

                    }
                }
            }
            if (sta.equals("Galle")) {
                if (room_type.equals("Single rooms-G")) {
                    if (facility.equals("Single beds non AC")) {
                        counts = 2;
                        qty.setValue(counts);
                    }
                }
                if (room_type.equals("Double rooms-G")) {
                    if (facility.equals("Two beds AC")) {
                        counts = 1;
                        qty.setValue(counts);
                    }
                    if (facility.equals("Two beds non AC")) {
                        counts = 4;
                        qty.setValue(counts);
                    }

                }
                if (room_type.equals("Family rooms-G")) {
                    if (facility.equals("Three beds non AC")) {
                        counts = 1;
                        qty.setValue(counts);
                    }
                }
            }

            if (sta.equals("Mihintale")) {
                if (room_type.equals("Double rooms-M")) {

                    if (facility.equals("Two beds non AC")) {
                        counts = 6;
                        qty.setValue(counts);
                    }
                }
                if (room_type.equals("Family rooms-M")) {
                    if (facility.equals("Three beds non AC")) {
                        counts = 2;
                        qty.setValue(counts);
                    }
                }
            }

            if (sta.equals("Jaffna")) {
                if (room_type.equals("Single rooms-J")) {
                    if (facility.equals("Single beds non AC")) {
                        counts = 2;
                        qty.setValue(counts);
                    }
                }

                if (room_type.equals("Double rooms-J")) {
                    if (facility.equals("Two beds with AC")) {
                        counts = 5;
                        qty.setValue(counts);
                    }
                    if (facility.equals("Two beds without AC")) {
                        counts = 5;
                        qty.setValue(counts);
                    }
                }
                if (room_type.equals("Family rooms-J")) {
                    if (facility.equals("Three beds with AC")) {
                        counts = 2;
                        qty.setValue(counts);

                    }
                    if (facility.equals("Three beds without AC")) {
                        counts = 2;
                        qty.setValue(counts);

                    }
                }
            }

            if (sta.equals("Trincomalee")) {
                if (room_type.equals("Double rooms-T")) {
                    if (facility.equals("non AC")) {
                        counts = 4;
                        qty.setValue(counts);
                    }
                }
                if (room_type.equals("Family rooms-T")) {
                    if (facility.equals("AC")) {
                        counts = 1;
                        qty.setValue(counts);

                    }
                }
            }
        } catch (Exception e) {
        }
    }

    private void status() {
        try {
            String now = null;
            String dbase=null;
            Date today=new Date();
            today.getTime();
         
            ResultSet rs;
            Statement st;
            String sql = "select date_to from retiring_room where availability='booking'";
            Connection con = db.getDBCon();
            st = con.createStatement();
            rs = st.executeQuery(sql);
            while (rs.next()) {
                dbase = rs.getString("date_to");
                SimpleDateFormat sdf = new SimpleDateFormat("E MMM dd yyyy");
                Date dbdate = sdf.parse(dbase);
                System.out.println("test");
                if (today.getTime()==dbdate.getTime() || today.getTime()>=dbdate.getTime()) {
                    System.out.println("check");
                    db.iud("update retiring_room set availability='available' where date_to='"+dbase+"'  ");
                }else{
                    
                }
               
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    
    
    
      private void checking() {
        try {
            ResultSet rs;
            Statement st;
            Connection con = db.getDBCon();
            st = con.createStatement();
            String sql = "select * from retiring_room where room_type='" +type.getSelectedItem().toString()+ "' AND faciities='"+facilities.getSelectedItem().toString()+"' AND station='"+station.getSelectedItem().toString()+"' AND  availability='booking'";
            rs = st.executeQuery(sql);
            boolean b = false;
            String dat0 = null;
            String dat1 = null;

            while (rs.next()) {
                dat0 = rs.getString("date_from");
                dat1 = rs.getString("date_to");

                SimpleDateFormat sdf = new SimpleDateFormat("E MMM dd yyyy");
                Date f_dbdate = sdf.parse(dat0);
                Date s_dbdate = sdf.parse(dat1);
                Date f_date = from.getDate();
                Date s_date = to.getDate();
                if (f_date.getTime() < f_dbdate.getTime() && s_date.getTime() < f_dbdate.getTime()) {
                    room.setText("AVAILABLE");
                }
                if (f_date.getTime() < f_dbdate.getTime() && s_date.getTime() > s_dbdate.getTime()) {
                   room.setText("NOT AVAILABLE");
                    break;
                }
                if (f_date.getTime() > f_dbdate.getTime() && s_date.getTime() < s_dbdate.getTime()) {
                    room.setText("NOT AVAILABLE");
                    break;
                }
                if (f_date.getTime() > f_dbdate.getTime() && f_date.getTime() < s_dbdate.getTime() && s_date.getTime() > s_dbdate.getTime()) {
                    room.setText("NOT AVAILABLE");
                    break;
                }
                if (f_date.getTime() < f_dbdate.getTime() && s_date.getTime() > f_dbdate.getTime() && s_date.getTime() < s_dbdate.getTime()) {
                    room.setText("NOT AVAILABLE");
                    break;
                }

                if (f_date.getTime() > s_dbdate.getTime() && s_date.getTime() > s_dbdate.getTime()) {
                    room.setText("AVAILABLE");
                }

                long diffIn = Math.abs(s_date.getTime() - f_date.getTime());
                long diff = TimeUnit.DAYS.convert(diffIn, TimeUnit.MILLISECONDS);
                // t2.setText(String.valueOf(diff));
                b = true;
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void valid_nic() {
         try {
            if (!(nic.getText().matches("^[0-9]{9}[vV]$"))) {
                JOptionPane.showMessageDialog(null, "Invalid Input for NIC ", "Error", JOptionPane.ERROR_MESSAGE);
                nic.setBackground(Color.red);
                nic.setForeground(Color.WHITE);
                nic.setText(null);
            } else {
                nic.setBackground(Color.GREEN);
                nic.setForeground(Color.WHITE);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

}
