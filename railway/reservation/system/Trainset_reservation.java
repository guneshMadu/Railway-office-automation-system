/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package railway.reservation.system;

import java.awt.Color;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.border.Border;
import static jdk.internal.org.objectweb.asm.commons.GeneratorAdapter.AND;
import static jdk.nashorn.internal.parser.TokenType.AND;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JRDesignQuery;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Gunesh Madusanka
 */
public class Trainset_reservation extends javax.swing.JFrame {

    /**
     * Creates new form booking_interface
     */
     int x, y;
    public Trainset_reservation() { 
        initComponents();
        // autodelete();
        status();
        

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel19 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jComboBox3 = new javax.swing.JComboBox();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        kGradientPanel1 = new keeptoo.KGradientPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        nic = new javax.swing.JTextField();
        org = new javax.swing.JTextField();
        name = new javax.swing.JTextField();
        type = new javax.swing.JComboBox();
        first = new javax.swing.JRadioButton();
        second = new javax.swing.JRadioButton();
        third = new javax.swing.JRadioButton();
        start = new javax.swing.JComboBox();
        end = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        s_date = new com.toedter.calendar.JDateChooser();
        e_date = new com.toedter.calendar.JDateChooser();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        no = new javax.swing.JTextField();
        id = new javax.swing.JTextField();
        line = new javax.swing.JComboBox();
        line1 = new javax.swing.JComboBox();
        passenger = new com.toedter.components.JSpinField();
        ava = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        ac = new javax.swing.JRadioButton();
        jLabel17 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        add_compartment = new com.toedter.components.JSpinField();
        price = new javax.swing.JTextField();
        vat = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        a_first = new javax.swing.JRadioButton();
        km = new javax.swing.JTextField();
        fee = new javax.swing.JTextField();
        non = new javax.swing.JRadioButton();
        jLabel12 = new javax.swing.JLabel();
        compartment = new com.toedter.components.JSpinField();
        a_second = new javax.swing.JRadioButton();
        jLabel11 = new javax.swing.JLabel();
        jCalendar1 = new com.toedter.calendar.JCalendar();
        fare = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        authorized = new javax.swing.JTextField();
        a_third = new javax.swing.JRadioButton();
        kGradientPanel2 = new keeptoo.KGradientPanel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();

        jLabel19.setText("Start From");

        jLabel22.setText("End To");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);

        kGradientPanel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                kGradientPanel1MouseDragged(evt);
            }
        });
        kGradientPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                kGradientPanel1MouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                kGradientPanel1MousePressed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Trainset Booking Entry Panel");

        jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel23.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/shutdown_48px.png"))); // NOI18N
        jLabel23.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel23MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout kGradientPanel1Layout = new javax.swing.GroupLayout(kGradientPanel1);
        kGradientPanel1.setLayout(kGradientPanel1Layout);
        kGradientPanel1Layout.setHorizontalGroup(
            kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, kGradientPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(225, 225, 225)
                .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        kGradientPanel1Layout.setVerticalGroup(
            kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(kGradientPanel1Layout.createSequentialGroup()
                .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel1.setBackground(new java.awt.Color(204, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel2.setText("Applicant NIC");

        jLabel3.setText("Name of the Organization");

        jLabel4.setText("Name of the Applicant");

        jLabel9.setText("Train type");

        jLabel10.setText("Class");

        nic.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                nicMouseExited(evt);
            }
        });
        nic.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nicKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nicKeyReleased(evt);
            }
        });

        org.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                orgKeyPressed(evt);
            }
        });

        name.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nameKeyPressed(evt);
            }
        });

        type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { " “HITACHI” Air Conditioned Train", " Special Train", " " }));

        buttonGroup1.add(first);
        first.setText("1st Class");

        buttonGroup1.add(second);
        second.setText("2nd Class");

        buttonGroup1.add(third);
        third.setSelected(true);
        third.setText("3rd Class");

        start.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                startItemStateChanged(evt);
            }
        });

        jLabel5.setText("Starting Station");

        jLabel6.setText("Terminating Station");

        jLabel21.setText("Number of Passenger");

        jLabel24.setText("Starting Date");

        jLabel25.setText("Ending Date");

        s_date.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                s_dateMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                s_dateMouseEntered(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                s_dateMouseReleased(evt);
            }
        });
        s_date.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                s_datePropertyChange(evt);
            }
        });
        s_date.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                s_dateKeyPressed(evt);
            }
        });

        e_date.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                e_datePropertyChange(evt);
            }
        });
        e_date.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                e_dateKeyPressed(evt);
            }
        });

        jLabel7.setText("Transportation ID");

        jLabel8.setText("Train No");

        no.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                noKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                noKeyReleased(evt);
            }
        });

        id.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                idMouseClicked(evt);
            }
        });

        line.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SELECT Start Line First", "Main Line", "Matale Line", "Puttlam Line", "Northern Line", "Batticoloa Line", "Coast Line", "KV Line", "Trincomalee Line", "Talaimannar Line" }));
        line.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                lineItemStateChanged(evt);
            }
        });
        line.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lineMouseClicked(evt);
            }
        });
        line.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                lineKeyPressed(evt);
            }
        });

        line1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SELECT End Line First", "Main Line", "Matale Line", "Puttlam Line", "Northern Line", "Batticoloa Line", "Coast Line", "KV Line", "Trincomalee Line", "Talaimannar Line" }));
        line1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                line1ItemStateChanged(evt);
            }
        });
        line1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                line1MouseClicked(evt);
            }
        });
        line1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                line1KeyPressed(evt);
            }
        });

        passenger.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                passengerKeyPressed(evt);
            }
        });

        ava.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                avaMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(120, 120, 120)
                        .addComponent(no, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(75, 75, 75)
                        .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(95, 95, 95)
                        .addComponent(nic, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(org, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(54, 54, 54)
                        .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(line, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(line1, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(85, 85, 85)
                        .addComponent(start, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(67, 67, 67)
                        .addComponent(end, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel21)
                        .addGap(57, 57, 57)
                        .addComponent(passenger, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(160, 160, 160)
                        .addComponent(ava, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel24)
                        .addGap(96, 96, 96)
                        .addComponent(s_date, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel25)
                        .addGap(102, 102, 102)
                        .addComponent(e_date, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(111, 111, 111)
                        .addComponent(type, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(135, 135, 135)
                        .addComponent(first)
                        .addGap(1, 1, 1)
                        .addComponent(second)
                        .addGap(9, 9, 9)
                        .addComponent(third)))
                .addContainerGap(67, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(no, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4))
                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(nic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel3))
                    .addComponent(org, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel4))
                    .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(line, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(line1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(start, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel6))
                    .addComponent(end, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel21)
                    .addComponent(passenger, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ava, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel24)
                    .addComponent(s_date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel25)
                    .addComponent(e_date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel10))
                    .addComponent(first)
                    .addComponent(second)
                    .addComponent(third))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(204, 255, 204));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        buttonGroup2.add(ac);
        ac.setText("A/C");
        ac.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                acItemStateChanged(evt);
            }
        });
        jPanel2.add(ac, new org.netbeans.lib.awtextra.AbsoluteConstraints(161, 72, -1, -1));

        jLabel17.setText("Additional Compartment");
        jPanel2.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 132, -1, -1));

        jLabel13.setText("Authorized Person");
        jPanel2.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 370, -1, -1));
        jPanel2.add(add_compartment, new org.netbeans.lib.awtextra.AbsoluteConstraints(161, 132, 220, -1));

        price.setEditable(false);
        price.setText("1250");
        price.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceActionPerformed(evt);
            }
        });
        jPanel2.add(price, new org.netbeans.lib.awtextra.AbsoluteConstraints(161, 102, 220, -1));

        vat.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                vatKeyPressed(evt);
            }
        });
        jPanel2.add(vat, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 250, 220, -1));

        jButton5.setText("Reset Additional Details");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(241, 212, -1, -1));

        jLabel14.setText("Number of Compartment(5)");
        jPanel2.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 22, -1, -1));

        buttonGroup3.add(a_first);
        a_first.setText("1st Class");
        jPanel2.add(a_first, new org.netbeans.lib.awtextra.AbsoluteConstraints(171, 182, -1, -1));

        km.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                kmKeyPressed(evt);
            }
        });
        jPanel2.add(km, new org.netbeans.lib.awtextra.AbsoluteConstraints(161, 42, 220, -1));

        fee.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                feeMouseClicked(evt);
            }
        });
        fee.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                feeKeyPressed(evt);
            }
        });
        jPanel2.add(fee, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 280, 220, -1));

        buttonGroup2.add(non);
        non.setSelected(true);
        non.setText("Non A/C");
        jPanel2.add(non, new org.netbeans.lib.awtextra.AbsoluteConstraints(301, 72, -1, -1));

        jLabel12.setText("Reservation fee");
        jPanel2.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 280, -1, -1));

        compartment.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                compartmentKeyPressed(evt);
            }
        });
        jPanel2.add(compartment, new org.netbeans.lib.awtextra.AbsoluteConstraints(161, 12, 220, -1));

        buttonGroup3.add(a_second);
        a_second.setText("2nd Class");
        jPanel2.add(a_second, new org.netbeans.lib.awtextra.AbsoluteConstraints(241, 182, -1, -1));

        jLabel11.setText("Enter Current VAT");
        jPanel2.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 250, -1, -1));
        jPanel2.add(jCalendar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(161, 398, 350, 180));
        jPanel2.add(fare, new org.netbeans.lib.awtextra.AbsoluteConstraints(161, 313, 220, 29));

        jLabel20.setText("Reservation Date");
        jPanel2.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 410, -1, -1));

        jLabel18.setText("Additional Compatment class");
        jPanel2.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 182, -1, -1));

        jLabel16.setText("Facilities");
        jPanel2.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 72, -1, -1));

        jLabel15.setText("Number of KM");
        jPanel2.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, -1, -1));

        jButton1.setText("Train Fares Calculator");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jButton1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton1KeyPressed(evt);
            }
        });
        jPanel2.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 310, -1, 39));
        jPanel2.add(authorized, new org.netbeans.lib.awtextra.AbsoluteConstraints(161, 363, 220, -1));

        buttonGroup3.add(a_third);
        a_third.setText("3rd Class");
        jPanel2.add(a_third, new org.netbeans.lib.awtextra.AbsoluteConstraints(311, 182, -1, -1));

        kGradientPanel2.setkEndColor(new java.awt.Color(204, 204, 204));
        kGradientPanel2.setkStartColor(new java.awt.Color(102, 102, 102));

        jButton2.setText("TrainSet Booking");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Booking Cancelation");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Ticket Generating");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton6.setText("Detailed Report");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout kGradientPanel2Layout = new javax.swing.GroupLayout(kGradientPanel2);
        kGradientPanel2.setLayout(kGradientPanel2Layout);
        kGradientPanel2Layout.setHorizontalGroup(
            kGradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kGradientPanel2Layout.createSequentialGroup()
                .addGap(171, 171, 171)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        kGradientPanel2Layout.setVerticalGroup(
            kGradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kGradientPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(kGradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(kGradientPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(kGradientPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(kGradientPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 588, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(kGradientPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void lineItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_lineItemStateChanged
        try {
            start.setSelectedItem("null");
            start.removeAllItems();
            //Matale Line  Puttlam Line  Northern Line  Batticoloa Line  Coast Line  KV Line  Trincomalee Line Talaimannar Line	
            String main[] = {"Maradana", "Dematagoda", "Kelaniya", "Wanawasala", "Hunupitiya", "Enderamulla", "Horape", "Ragama", "Walpola", "Batuwatte", "Bulugahagoda", "Ganemulla", "Yagoda", "Gampaha", "Daraluwa", "Bemmulla", "Magelegoda", "Heendeniya", "Veyangoda", "Wandurawa",
                "Keenawala", "Pallewala", "Ganegoda", "Wijayarajadahana", "Mihirigama", "Wilwatte", "Botale", "Abeypussa", "Yattalgoda", "Buthgamuwa", "Alawwa", "Wlakubura", "Polgahawela",
                "Panaleeya", "Tismalpola", "Yatagama", "Rambukkana", "Kadigamuwa", "Gangoda", "Ihalakotte", "Balana", "Kadugannawa", "Pilimatalawa", "Peradeniya", "Koshinna", "Gelioya",
                "Gampola", "Tembligala", "Ulapone", "Nawalapitiya", "Inguruoya", "Galaboda", "Watawala", "Ihalawatawala", "Rosella", "Hatton", "Kotagala", "Talawakele", "watagoda",
                "Greatwestern", "Radella", "Nanuoya", "Perakumpura", "Ambewela", "Pattipola", "Ohiya", "Idalgasinna", "Haputale", "Deyatalawa", "Bandarawela", "Kinigama",
                "Heeloya", "Kitalelle", "Elle", "Demodara", "Uduwara", "Haliela", "Badulla"
            };
            String matale[] = {"Sarasaviuyana", "Kandy", "Mahaiyawa", "Katugastota", "Udatalawinna", "Wattegama", "Pathanpha", "Udaththawala", "Ukuwela", "Matale"};
            String puttalama[] = {"Peralanda", "Kandana", "Kapuwatte", "Ja-Ela", "Tudella", "Kudahakapola", "Alawatupitiya", "Seeduwa", "Liyanagemulla",
                "Katunayaka Airport", "Katunayake", "Trade Zoone", "Kurana", "Negombo", "kattuwa", "Kochchikade", "Waikkala", "Bolawatte",
                "Borelessa", "Lunuwila", "Tummodara", "Nattandiya", "Walahapitiya", "Kudawewa", "Nelumpokuna", "Madampe", "Kakkapalliya",
                "Sawarana", "Chilaw", "Manuwangama", "Bangadeniya", "Arachchikattuwa", "Anawilundawa", "Battaluoya", "Pulachchikulam", "Mundal",
                "Mangalaeliya", "Madurankuliya", "Erukkalam pendu", "Palavi", "Thilladiya", "Puttalam", "Noor Nagar", "Karadipuwar", "Periyanagavillu"
            };

            String northern[] = {"Girambe", "Talawattegedara", "Potuhera", "Nailiya", "Kurunegala", "Muththettugala", "Wellawa", "Ganewatte", "Yahapauwa", "Nagollagama", "Timbiriyagedara",
                "Maho", "Randenigama", "Abanpola", "Galgamuwa", "Senarathgama", "Thambuttegama", "Talawa", "Srawasthipura", "Anuradhapura Town", "Anuradhapura",
                "Mihintale Junction", "Saliyapura", "Parasangahawewa", "Medagama", "Medawachchiya", "Poonewa", "Erittaperiyakulam", "Vavuniya", "Mihintale",
                "Parasangahawewa", "Medawachchiya", "Vavuniya", "Omantai", "Puliyankulama", "Mankulam", "Murukandi", "Kilinochchi", "Paranthan", "ElephantPass",
                "Pallai", "Kodikamam", "Chavakachcheri", "Navatkuli", "Jaffna", "Jaffna CSM", "Jaffna SM", "Kondavil", "Chunnakam", "Kankesanthurei"
            };

            String batticola[] = {"Konwewa", "Moragollagama", "kekirawa", "Kalawewa", "Palugaswewa", "Gal Oya Junction", "Higurakgoda", "Polonnaruwa", "Manampitiya", "Welikanda",
                "Punani", "Valachchenai", "Eravur", "Batticaloa"};

            String cost[] = {"Fort", "Secretartat Halt", "Kompnnavidiya", "Kollupitiya", "Bambalapitiya", "wellawatte", "Dehiwala", "Mount Laviniya", "Rathmalana", "Angulana",
                "Lunawa", "Moratuwa", "Koralawella", "Egodauyana", "Panadura", "Pinwatte", "Wadduwa", "Train Halt 01", "Kalutara North", "Kaluthara South", "Katukurunda",
                "Payagala North", "Payagala south", "Maggona", "Beruwala", "Hettimulla", "Aluthgama", "Bentota", "Induruwa", "Mha Induruwa", "kosgoda", "Piyagama",
                "Ahungalle", "Patagamgoda", "Balapitiya", "Andadola", "Kandegoda", "Ambalangoda", "Madampagama", "Akurala", "Kahawa", "Telwatte", "Seenigama",
                "Hikkaduwa", "Thiranagama", "Kumarakanda", "Dodanduwa", "Rathgama", "Boossa", "Ginthota", "Piyadigama", "Richmond Hill", "Galle", "Katugoda",
                "Unawatuna", "Taple", "Habaraduwa", "Koggala", "Kathaluwa", "Ahangama", "Midigama", "Kumbalgama", "weligama", "Polwathumodara", "Mirissa", "Kamburugamuwa",
                "Walgama", "Matara", "Piliduwa"};

            String kv[] = {"Baseline Road", "Cotta Road", "Narahenpita", "Kirulapone", "Nugegoda", "Udhamulla", "Nawinna", "Maharagama", "Pannipitiya", "Kottawa", "Malapalle",
                "Homagama Hospital", "Homagama", "Panagoda", "Godagama", "Meegoda", "Watareka", "Padukka", "Arukkuwatte", "Angampitiya", "Uggalla", "Pinnawala",
                "Gammana", "Morakele", "Waga", "Kadugoda", "Kosgama", "puwakpitiya", "Avisawella"};

            String trinco[] = {"Kantale", "Tambalagamuwa", "China Bay", "Trincomalee"};

            String mannar1[] = {"Cheddikulam", "Madu Road", "Murunkan", "Mannar", "Pesalai", "Talaimannar", "Talaimannar Pier"};

            if (line.getSelectedItem().toString().equals("Main Line")) {
                for (int i = 0; i < main.length; i++) {
                    start.addItem(main[i]);
                }
            }
            if (line.getSelectedItem().toString().equals("Matale Line")) {
                for (int j = 0; j < matale.length; j++) {
                    start.addItem(matale[j]);
                }
            }
            if (line.getSelectedItem().toString().equals("Puttlam Line")) {
                for (int k = 0; k < puttalama.length; k++) {
                    start.addItem(puttalama[k]);
                }
            }
            if (line.getSelectedItem().toString().equals("Northern Line")) {
                for (int m = 0; m < northern.length; m++) {
                    start.addItem(northern[m]);
                }
            }
            if (line.getSelectedItem().toString().equals("Batticoloa Line")) {
                for (int n = 0; n < batticola.length; n++) {
                    start.addItem(batticola[n]);
                }
            }
            if (line.getSelectedItem().toString().equals("Coast Line")) {
                for (int o = 0; o < cost.length; o++) {
                    start.addItem(cost[o]);
                }
            }
            if (line.getSelectedItem().toString().equals("KV Line")) {
                for (int p = 0; p < kv.length; p++) {
                    start.addItem(kv[p]);
                }
            }
            if (line.getSelectedItem().toString().equals("Trincomalee Line")) {
                for (int q = 0; q < trinco.length; q++) {
                    start.addItem(trinco[q]);
                }
            }
            if (line.getSelectedItem().toString().equals("Talaimannar Line")) {

                for (int r = 0; r < mannar1.length; r++) {

                    start.addItem(mannar1[r]);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_lineItemStateChanged

    private void lineMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lineMouseClicked

    }//GEN-LAST:event_lineMouseClicked

    private void line1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_line1ItemStateChanged
        try {
            end.setSelectedItem("null");
            end.removeAllItems();
            //Matale Line  Puttlam Line  Northern Line  Batticoloa Line  Coast Line  KV Line  Trincomalee Line Talaimannar Line	
            String main[] = {"Maradana", "Dematagoda", "Kelaniya", "Wanawasala", "Hunupitiya", "Enderamulla", "Horape", "Ragama", "Walpola", "Batuwatte", "Bulugahagoda", "Ganemulla", "Yagoda", "Gampaha", "Daraluwa", "Bemmulla", "Magelegoda", "Heendeniya", "Veyangoda", "Wandurawa",
                "Keenawala", "Pallewala", "Ganegoda", "Wijayarajadahana", "Mihirigama", "Wilwatte", "Botale", "Abeypussa", "Yattalgoda", "Buthgamuwa", "Alawwa", "Wlakubura", "Polgahawela",
                "Panaleeya", "Tismalpola", "Yatagama", "Rambukkana", "Kadigamuwa", "Gangoda", "Ihalakotte", "Balana", "Kadugannawa", "Pilimatalawa", "Peradeniya", "Koshinna", "Gelioya",
                "Gampola", "Tembligala", "Ulapone", "Nawalapitiya", "Inguruoya", "Galaboda", "Watawala", "Ihalawatawala", "Rosella", "Hatton", "Kotagala", "Talawakele", "watagoda",
                "Greatwestern", "Radella", "Nanuoya", "Perakumpura", "Ambewela", "Pattipola", "Ohiya", "Idalgasinna", "Haputale", "Deyatalawa", "Bandarawela", "Kinigama",
                "Heeloya", "Kitalelle", "Elle", "Demodara", "Uduwara", "Haliela", "Badulla"
            };
            String matale[] = {"Sarasaviuyana", "Kandy", "Mahaiyawa", "Katugastota", "Udatalawinna", "Wattegama", "Pathanpha", "Udaththawala", "Ukuwela", "Matale"};
            String puttalama[] = {"Peralanda", "Kandana", "Kapuwatte", "Ja-Ela", "Tudella", "Kudahakapola", "Alawatupitiya", "Seeduwa", "Liyanagemulla",
                "Katunayaka Airport", "Katunayake", "Trade Zoone", "Kurana", "Negombo", "kattuwa", "Kochchikade", "Waikkala", "Bolawatte",
                "Borelessa", "Lunuwila", "Tummodara", "Nattandiya", "Walahapitiya", "Kudawewa", "Nelumpokuna", "Madampe", "Kakkapalliya",
                "Sawarana", "Chilaw", "Manuwangama", "Bangadeniya", "Arachchikattuwa", "Anawilundawa", "Battaluoya", "Pulachchikulam", "Mundal",
                "Mangalaeliya", "Madurankuliya", "Erukkalam pendu", "Palavi", "Thilladiya", "Puttalam", "Noor Nagar", "Karadipuwar", "Periyanagavillu"
            };

            String northern[] = {"Girambe", "Talawattegedara", "Potuhera", "Nailiya", "Kurunegala", "Muththettugala", "Wellawa", "Ganewatte", "Yahapauwa", "Nagollagama", "Timbiriyagedara",
                "Maho", "Randenigama", "Abanpola", "Galgamuwa", "Senarathgama", "Thambuttegama", "Talawa", "Srawasthipura", "Anuradhapura Town", "Anuradhapura",
                "Mihintale Junction", "Saliyapura", "Parasangahawewa", "Medagama", "Medawachchiya", "Poonewa", "Erittaperiyakulam", "Vavuniya", "Mihintale",
                "Parasangahawewa", "Medawachchiya", "Vavuniya", "Omantai", "Puliyankulama", "Mankulam", "Murukandi", "Kilinochchi", "Paranthan", "ElephantPass",
                "Pallai", "Kodikamam", "Chavakachcheri", "Navatkuli", "Jaffna", "Jaffna CSM", "Jaffna SM", "Kondavil", "Chunnakam", "Kankesanthurei"
            };

            String batticola[] = {"Konwewa", "Moragollagama", "kekirawa", "Kalawewa", "Palugaswewa", "Gal Oya Junction", "Higurakgoda", "Polonnaruwa", "Manampitiya", "Welikanda",
                "Punani", "Valachchenai", "Eravur", "Batticaloa"};

            String cost[] = {"Fort", "Secretartat Halt", "Kompnnavidiya", "Kollupitiya", "Bambalapitiya", "wellawatte", "Dehiwala", "Mount Laviniya", "Rathmalana", "Angulana",
                "Lunawa", "Moratuwa", "Koralawella", "Egodauyana", "Panadura", "Pinwatte", "Wadduwa", "Train Halt 01", "Kalutara North", "Kaluthara South", "Katukurunda",
                "Payagala North", "Payagala south", "Maggona", "Beruwala", "Hettimulla", "Aluthgama", "Bentota", "Induruwa", "Mha Induruwa", "kosgoda", "Piyagama",
                "Ahungalle", "Patagamgoda", "Balapitiya", "Andadola", "Kandegoda", "Ambalangoda", "Madampagama", "Akurala", "Kahawa", "Telwatte", "Seenigama",
                "Hikkaduwa", "Thiranagama", "Kumarakanda", "Dodanduwa", "Rathgama", "Boossa", "Ginthota", "Piyadigama", "Richmond Hill", "Galle", "Katugoda",
                "Unawatuna", "Taple", "Habaraduwa", "Koggala", "Kathaluwa", "Ahangama", "Midigama", "Kumbalgama", "weligama", "Polwathumodara", "Mirissa", "Kamburugamuwa",
                "Walgama", "Matara", "Piliduwa"};

            String kv[] = {"Baseline Road", "Cotta Road", "Narahenpita", "Kirulapone", "Nugegoda", "Udhamulla", "Nawinna", "Maharagama", "Pannipitiya", "Kottawa", "Malapalle",
                "Homagama Hospital", "Homagama", "Panagoda", "Godagama", "Meegoda", "Watareka", "Padukka", "Arukkuwatte", "Angampitiya", "Uggalla", "Pinnawala",
                "Gammana", "Morakele", "Waga", "Kadugoda", "Kosgama", "puwakpitiya", "Avisawella"};

            String trinco[] = {"Kantale", "Tambalagamuwa", "China Bay", "Trincomalee"};

            String mannar1[] = {"Cheddikulam", "Madu Road", "Murunkan", "Mannar", "Pesalai", "Talaimannar", "Talaimannar Pier"};

            if (line1.getSelectedItem().toString().equals("Main Line")) {
                for (int i = 0; i < main.length; i++) {
                    end.addItem(main[i]);
                }
            }
            if (line1.getSelectedItem().toString().equals("Matale Line")) {
                for (int j = 0; j < matale.length; j++) {
                    end.addItem(matale[j]);
                }
            }
            if (line1.getSelectedItem().toString().equals("Puttlam Line")) {
                for (int k = 0; k < puttalama.length; k++) {
                    end.addItem(puttalama[k]);
                }
            }
            if (line1.getSelectedItem().toString().equals("Northern Line")) {
                for (int m = 0; m < northern.length; m++) {
                    end.addItem(northern[m]);
                }
            }
            if (line1.getSelectedItem().toString().equals("Batticoloa Line")) {
                for (int n = 0; n < batticola.length; n++) {
                    end.addItem(batticola[n]);
                }
            }
            if (line1.getSelectedItem().toString().equals("Coast Line")) {
                for (int o = 0; o < cost.length; o++) {
                    end.addItem(cost[o]);
                }
            }
            if (line1.getSelectedItem().toString().equals("KV Line")) {
                for (int p = 0; p < kv.length; p++) {
                    end.addItem(kv[p]);
                }
            }
            if (line1.getSelectedItem().toString().equals("Trincomalee Line")) {
                for (int q = 0; q < trinco.length; q++) {
                    end.addItem(trinco[q]);
                }
            }
            if (line1.getSelectedItem().toString().equals("Talaimannar Line")) {

                for (int r = 0; r < mannar1.length; r++) {

                    end.addItem(mannar1[r]);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_line1ItemStateChanged

    private void line1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_line1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_line1MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            validate_nic();
            /**/
            int i = Integer.parseInt(no.getText());
            int m = Integer.parseInt(id.getText());
            String classes;
            if (first.isSelected()) {
                classes = "1st Class";
            } else if (second.isSelected()) {
                classes = "2nd Class";
            } else {
                classes = "3rd Class";
            }
            String facility;
            if (ac.isSelected()) {
                facility = "A/C";
            } else {
                facility = "Non A/C";
            }
            String add_class;
            if (a_first.isSelected()) {
                add_class = "1st Class";
            } else if (a_second.isSelected()) {
                add_class = "2nd Class";
            } else {
                add_class = "3rd Class";
            }

            SimpleDateFormat sdf = new SimpleDateFormat("E MMM dd yyyy");
            String from_ = sdf.format(s_date.getDate());
            String to_ = sdf.format(e_date.getDate());

            String date_now = sdf.format(jCalendar1.getDate());
            if (nic.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Insertion caant be complete", "Sorry", JOptionPane.ERROR_MESSAGE);
            } else {
                if (ava.getText().equals("AVAILABLE")) {
                    db.iud("insert into trainset_reservation (transport_id, train_no, NIC, org_name, start_station, end_station, passenger_count, start_date, end_date, type, class, compartment_count, km, facility, add_compartment, add_compartment_class, fare, authorized,applicant_name,reservation_fee,status,res_date) values"
                            + " ('" + m + "','" + i + "','" + nic.getText() + "','" + org.getText() + "','" + start.getSelectedItem().toString() + "','" + end.getSelectedItem().toString() + "','" + passenger.getValue() + "','" + from_ + "','" + to_ + "','" + type.getSelectedItem().toString() + "','" + classes + "','" + compartment.getValue() + "','" + km.getText() + "','" + facility + "','" + add_compartment.getValue() + "','" + add_class + "',"
                            + " '" + fare.getText() + "','" + authorized.getText() + "','" + name.getText() + "','" + fee.getText() + "','booking','" + date_now + "')");
                    JOptionPane.showMessageDialog(null, "Data are inserted successfully ", "Thank You", JOptionPane.ERROR_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, "Date Range Not Available For this Train", "Sorry", JOptionPane.ERROR_MESSAGE);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            int m = Integer.parseInt(id.getText());
            db.iud("Delete from trainset_reservation where transport_id='" + m + "' AND NIC='" + nic.getText() + "'");
            JOptionPane.showMessageDialog(null, "Cancellation successfully completed", "Thank You", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {

            double kms = Double.parseDouble(km.getText());
            double tax = Double.parseDouble(vat.getText());
            double p = Double.parseDouble(price.getText());
            double new_tax = ((kms * p) / 100) * tax;
            double Fare = (kms * p) + new_tax;

            int additional = add_compartment.getValue();
            if (a_first.isSelected()) {
                Fare += ((Fare / 100) * 20) * additional;

            } else if (a_second.isSelected() || a_third.isSelected()) {
                Fare += ((Fare / 100) * 10) * additional;
            }

            if (compartment.getValue() <= 5 && compartment.getValue() > 0) {
                if (kms > 0) {

                    fare.setText(String.valueOf(Fare));
                }
            } else {
                fare.setText("Compartment Data Error");

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void priceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_priceActionPerformed

    private void acItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_acItemStateChanged
        try {
            if (ac.isSelected()) {
                price.setText("1350");

            } else {
                price.setText("1250");

            }

        } catch (Exception e) {
        }
    }//GEN-LAST:event_acItemStateChanged

    private void feeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_feeMouseClicked
        try {

            double kms = Double.parseDouble(km.getText());
            double tax = Double.parseDouble(vat.getText());
            String classes;
            double Fee = 0;
            if (first.isSelected()) {
                classes = "1st Class";
                tax = (kms * 280) / 100 * tax;
                Fee = 280 + tax;
                fee.setText(String.valueOf(Fee));
            } else if (second.isSelected()) {
                classes = "2nd Class";
                tax = (kms * 200) / 100 * tax;
                Fee = 200 + tax;
                fee.setText(String.valueOf(Fee));
            } else {
                classes = "3rd Class";
                tax = (kms * 200) / 100 * tax;
                Fee = 200 + tax;
                fee.setText(String.valueOf(Fee));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_feeMouseClicked

    private void startItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_startItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_startItemStateChanged

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try {
            if (no.getText().equals("") || id.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Plesae provide relevant information first", "Sorry", JOptionPane.ERROR_MESSAGE);
            } else {
                Connection con;
                Class.forName("com.mysql.jdbc.Driver");
                con = DriverManager.getConnection("jdbc:mysql://localhost:3306/railway", "root", "123");
                

               JasperDesign jdesign = JRXmlLoader.load("C:\\Users\\Gunesh Madusanka\\Documents\\NetBeansProjects\\Railway Reservation System\\src\\railway\\reservation\\system\\trainset_report.jrxml");
                String sql = "select * from trainset_reservation where transport_id='" + Integer.parseInt(id.getText()) + "' AND train_no='" + Integer.parseInt(no.getText()) + "'";

                JRDesignQuery updateQuery = new JRDesignQuery();
                updateQuery.setText(sql);
                jdesign.setQuery(updateQuery);
                JasperReport jreport = JasperCompileManager.compileReport(jdesign);
                JasperPrint jPrint = JasperFillManager.fillReport(jreport, null, con);

                JasperViewer.viewReport(jPrint);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        try {
            add_compartment.setValue(0);
            a_first.setSelected(false);
            a_second.setSelected(false);
            a_third.setSelected(false);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void noKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_noKeyReleased
        try {
            ResultSet rs;
            Statement st;
            String sql = "select * from trainset_reservation where status='booking' AND train_no='" + Integer.parseInt(no.getText()) + "'";
            Connection con = db.getDBCon();
            st = con.createStatement();
            rs = st.executeQuery(sql);
            while (rs.next()) {
                // System.out.println("check");
                ava.setText("Not Available");
                break;

            }
            if (rs.getRow() > 0) {
                // System.out.println("check1");
                ava.setText("NOT AVAILABLE");
            } else {
                ava.setText("AVAILABLE");
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_noKeyReleased

    private void avaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_avaMouseClicked

    }//GEN-LAST:event_avaMouseClicked

    private void idMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_idMouseClicked
        try {
            int trans_id = 0;
            ResultSet rs;
            Statement st;
            Connection con = db.getDBCon();
            st = con.createStatement();
            String sql = "select * from trainset_reservation";
            rs = st.executeQuery(sql);
            while (rs.next()) {
                ++trans_id;
            }
            id.setText(String.valueOf(++trans_id));
        } catch (Exception e) {
            // e.printStackTrace();
        }


    }//GEN-LAST:event_idMouseClicked

    private void s_dateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_s_dateMouseClicked

    }//GEN-LAST:event_s_dateMouseClicked

    private void s_dateMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_s_dateMouseReleased

    }//GEN-LAST:event_s_dateMouseReleased

    private void s_dateMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_s_dateMouseEntered

    }//GEN-LAST:event_s_dateMouseEntered

    private void s_datePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_s_datePropertyChange
        try {

            SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
            Date f_date = s_date.getDate();
            Date now = jCalendar1.getDate();
            if (f_date.getTime() < now.getTime()) {
                JOptionPane.showMessageDialog(null, "You can not booking for previous dates", null, JOptionPane.ERROR_MESSAGE);
                s_date.setDate(now);

            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_s_datePropertyChange

    private void e_datePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_e_datePropertyChange
        try {
            SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
            Date now = jCalendar1.getDate();
            Date f_date = s_date.getDate();
            Date s_date = e_date.getDate();
            if (s_date.getTime() < f_date.getTime()) {
                JOptionPane.showMessageDialog(null, "wrong date input", null, JOptionPane.ERROR_MESSAGE);
                e_date.setDate(now);
            }
        } catch (Exception e) {
            //e.printStackTrace(); 
        }
    }//GEN-LAST:event_e_datePropertyChange

    private void nicKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nicKeyReleased

    }//GEN-LAST:event_nicKeyReleased

    private void nicMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nicMouseExited

    }//GEN-LAST:event_nicMouseExited

    private void orgKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_orgKeyPressed
        try {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                name.grabFocus();

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_orgKeyPressed

    private void noKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_noKeyPressed
        try {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                nic.grabFocus();
                JOptionPane.showMessageDialog(null, "Please click on Transportation ID ");

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_noKeyPressed

    private void nicKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nicKeyPressed
        try {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                org.grabFocus();

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_nicKeyPressed

    private void nameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nameKeyPressed
        try {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                line.grabFocus();

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_nameKeyPressed

    private void lineKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lineKeyPressed
        try {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                line1.grabFocus();

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_lineKeyPressed

    private void line1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_line1KeyPressed
        try {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                passenger.grabFocus();

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_line1KeyPressed

    private void passengerKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passengerKeyPressed
        try {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                s_date.grabFocus();

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_passengerKeyPressed

    private void s_dateKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_s_dateKeyPressed
        try {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                e_date.grabFocus();

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_s_dateKeyPressed

    private void e_dateKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_e_dateKeyPressed
        try {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                type.grabFocus();

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_e_dateKeyPressed

    private void compartmentKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_compartmentKeyPressed
        try {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                km.grabFocus();

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_compartmentKeyPressed

    private void kmKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_kmKeyPressed
        try {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                vat.grabFocus();

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_kmKeyPressed

    private void vatKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_vatKeyPressed
        try {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                fee.grabFocus();

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_vatKeyPressed

    private void feeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_feeKeyPressed
        try {
            try {

                double kms = Double.parseDouble(km.getText());
                double tax = Double.parseDouble(vat.getText());
                String classes;
                double Fee = 0;
                if (first.isSelected()) {
                    classes = "1st Class";
                    tax = (kms * 280) / 100 * tax;
                    Fee = 280 + tax;
                    fee.setText(String.valueOf(Fee));
                } else if (second.isSelected()) {
                    classes = "2nd Class";
                    tax = (kms * 200) / 100 * tax;
                    Fee = 200 + tax;
                    fee.setText(String.valueOf(Fee));
                } else {
                    classes = "3rd Class";
                    tax = (kms * 200) / 100 * tax;
                    Fee = 200 + tax;
                    fee.setText(String.valueOf(Fee));
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                jButton1.grabFocus();

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_feeKeyPressed

    private void jButton1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton1KeyPressed
        try {

            double kms = Double.parseDouble(km.getText());
            double tax = Double.parseDouble(vat.getText());
            double p = Double.parseDouble(price.getText());
            double new_tax = ((kms * p) / 100) * tax;
            double Fare = (kms * p) + new_tax;

            int additional = add_compartment.getValue();
            if (a_first.isSelected()) {
                Fare += ((Fare / 100) * 20) * additional;

            } else if (a_second.isSelected() || a_third.isSelected()) {
                Fare += ((Fare / 100) * 10) * additional;
            }

            if (compartment.getValue() <= 5 && compartment.getValue() > 0) {
                if (kms > 0) {

                    fare.setText(String.valueOf(Fare));
                }
            } else {
                fare.setText("Compartment Data Error");

            }
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                authorized.grabFocus();

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton1KeyPressed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        try {

            Connection con;
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/railway", "root", "123");

            JasperDesign jdesign = JRXmlLoader.load("C:\\Users\\Gunesh Madusanka\\Documents\\NetBeansProjects\\Railway Reservation System\\src\\railway\\reservation\\system\\trainset_detail_report.jrxml");
            String sql = "select * from trainset_reservation";

            JRDesignQuery updateQuery = new JRDesignQuery();
            updateQuery.setText(sql);
            jdesign.setQuery(updateQuery);
            JasperReport jreport = JasperCompileManager.compileReport(jdesign);
            JasperPrint jPrint = JasperFillManager.fillReport(jreport, null, con);

            JasperViewer.viewReport(jPrint);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jLabel23MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel23MouseClicked
        try {
            dispose();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_jLabel23MouseClicked

    private void kGradientPanel1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_kGradientPanel1MouseDragged
       int xx = evt.getXOnScreen();
        int yy = evt.getYOnScreen();
        this.setLocation(xx - x, yy - y);
    }//GEN-LAST:event_kGradientPanel1MouseDragged

    private void kGradientPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_kGradientPanel1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_kGradientPanel1MouseClicked

    private void kGradientPanel1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_kGradientPanel1MousePressed
      x = evt.getX();
        y = evt.getY();
    }//GEN-LAST:event_kGradientPanel1MousePressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Trainset_reservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Trainset_reservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Trainset_reservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Trainset_reservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Trainset_reservation().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton a_first;
    private javax.swing.JRadioButton a_second;
    private javax.swing.JRadioButton a_third;
    private javax.swing.JRadioButton ac;
    private com.toedter.components.JSpinField add_compartment;
    private javax.swing.JTextField authorized;
    private javax.swing.JTextField ava;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private com.toedter.components.JSpinField compartment;
    private com.toedter.calendar.JDateChooser e_date;
    private javax.swing.JComboBox end;
    private javax.swing.JTextField fare;
    private javax.swing.JTextField fee;
    private javax.swing.JRadioButton first;
    private javax.swing.JTextField id;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private com.toedter.calendar.JCalendar jCalendar1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private keeptoo.KGradientPanel kGradientPanel1;
    private keeptoo.KGradientPanel kGradientPanel2;
    private javax.swing.JTextField km;
    private javax.swing.JComboBox line;
    private javax.swing.JComboBox line1;
    private javax.swing.JTextField name;
    private javax.swing.JTextField nic;
    private javax.swing.JTextField no;
    private javax.swing.JRadioButton non;
    private javax.swing.JTextField org;
    private com.toedter.components.JSpinField passenger;
    private javax.swing.JTextField price;
    private com.toedter.calendar.JDateChooser s_date;
    private javax.swing.JRadioButton second;
    private javax.swing.JComboBox start;
    private javax.swing.JRadioButton third;
    private javax.swing.JComboBox type;
    private javax.swing.JTextField vat;
    // End of variables declaration//GEN-END:variables

    private void checking() {
        try {
            ResultSet rs;
            Statement st;
            Connection con = db.getDBCon();
            st = con.createStatement();
            String sql = "select * from trainset_reservation where train_no='" + Integer.parseInt(no.getText()) + "'";
            rs = st.executeQuery(sql);
            boolean b = false;
            String dat0 = null;
            String dat1 = null;

            while (rs.next()) {
                dat0 = rs.getString("start_date");
                dat1 = rs.getString("end_date");

                SimpleDateFormat sdf = new SimpleDateFormat("E MMM dd HH:mm:ss z yyyy");
                Date f_dbdate = sdf.parse(dat0);
                Date s_dbdate = sdf.parse(dat1);
                Date f_date = s_date.getDate();
                Date s_date = e_date.getDate();
                if (f_date.getTime() < f_dbdate.getTime() && s_date.getTime() < f_dbdate.getTime()) {
                    ava.setText("AVAILABLE");
                }
                if (f_date.getTime() < f_dbdate.getTime() && s_date.getTime() > s_dbdate.getTime()) {
                    ava.setText("NOT AVAILABLE");
                    break;
                }
                if (f_date.getTime() > f_dbdate.getTime() && s_date.getTime() < s_dbdate.getTime()) {
                    ava.setText("NOT AVAILABLE");
                    break;
                }
                if (f_date.getTime() > f_dbdate.getTime() && f_date.getTime() < s_dbdate.getTime() && s_date.getTime() > s_dbdate.getTime()) {
                    ava.setText("NOT AVAILABLE");
                    break;
                }
                if (f_date.getTime() < f_dbdate.getTime() && s_date.getTime() > f_dbdate.getTime() && s_date.getTime() < s_dbdate.getTime()) {
                    ava.setText("NOT AVAILABLE");
                    break;
                }

                if (f_date.getTime() > s_dbdate.getTime() && s_date.getTime() > s_dbdate.getTime()) {
                    ava.setText("AVAILABLE");
                }

                long diffIn = Math.abs(s_date.getTime() - f_date.getTime());
                long diff = TimeUnit.DAYS.convert(diffIn, TimeUnit.MILLISECONDS);
                // t2.setText(String.valueOf(diff));
                b = true;
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    void autodelete() {
        try {
            Date today = new Date();
            today.getTime();

            ResultSet rs;
            Statement st;
            Connection con = db.getDBCon();
            st = con.createStatement();
            String sql = "select transport_id,train_no,NIC,end_date from trainset_reservation";
            rs = st.executeQuery(sql);
            boolean b = false;
            String dat1 = null;
            while (rs.next()) {
                dat1 = rs.getString("end_date");
                SimpleDateFormat sdf = new SimpleDateFormat("E MMM dd HH:mm:ss z yyyy");
                Date dbdate = sdf.parse(dat1);
                if (dbdate.getTime() < today.getTime()) {
                    System.out.println("same");
                    int trans = Integer.parseInt(rs.getString("transport_id"));
                    int train = Integer.parseInt(rs.getString("train_no"));
                    String nic = rs.getString("NIC");
                    System.err.println("test1");
                    db.iud("Delete from trainset_reservation where transport_id='" + trans + "' AND train_no='" + train + "' AND NIC='" + nic + "'");
                    System.err.println("test2");
                }
            }
            JOptionPane.showMessageDialog(null, "Database UpTo Date", "Congratulation", JOptionPane.INFORMATION_MESSAGE);

            //System.out.println(today);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void status() {
        try {
            String now = null;
            String dbase = null;
            Date today = new Date();
            today.getTime();

            ResultSet rs;
            Statement st;
            String sql = "select end_date from trainset_reservation where status='booking'";
            Connection con = db.getDBCon();
            st = con.createStatement();
            rs = st.executeQuery(sql);
            while (rs.next()) {
                dbase = rs.getString("end_date");
                SimpleDateFormat sdf = new SimpleDateFormat("E MMM dd yyyy");
                Date dbdate = sdf.parse(dbase);
                System.out.println("test");
                if (today.getTime() == dbdate.getTime() || today.getTime() >= dbdate.getTime()) {
                    System.out.println("check");
                    db.iud("update trainset_reservation set status='available' where end_date='" + dbase + "'  ");

                }

            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
     private void validate_nic() {
        try {
            if (!(nic.getText().matches("^[0-9]{9}[vV]$"))) {
                JOptionPane.showMessageDialog(null, "Invalid Input for NIC ", "Error", JOptionPane.ERROR_MESSAGE);
                nic.setBackground(Color.red);
                nic.setForeground(Color.WHITE);
                nic.setText(null);
            } else {
                nic.setBackground(Color.GREEN);
                nic.setForeground(Color.WHITE);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
   
}
