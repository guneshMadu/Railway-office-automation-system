/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package railway.reservation.system;

import com.toedter.calendar.JDateChooser;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JSpinner;
import javax.swing.SpinnerDateModel;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Gunesh Madusanka
 */
public class train_schedule extends javax.swing.JFrame {

    /**
     * Creates new form train_schedule
     */
     int x, y;
    public train_schedule() {
        initComponents();
        delete_check();

        try {
            ResultSet rs;
            Statement st;
            Connection con = db.getDBCon();
            st = con.createStatement();
            String sql = "select * from train_schedule";
            rs = st.executeQuery(sql);
            boolean b = false;
            while (rs.next()) {
                DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
                Vector v = new Vector();
                String dat0 = rs.getString("transportation_id");
                String dat1 = rs.getString("train_no");
                String dat2 = rs.getString("source");
                String dat3 = rs.getString("destination");

                String dat6 = rs.getString("type");
                String dat7 = rs.getString("facilities");
                String dat8 = rs.getString("class");
                String dat9 = rs.getString("fare");
                String dat10 = rs.getString("departure_time");
                String dat11 = rs.getString("arrival_time");
                String dat12 = rs.getString("day");
                String dat13 = rs.getString("seat");

                v.add(dat0);
                v.add(dat1);
                v.add(dat2);
                v.add(dat3);

                v.add(dat6);
                v.add(dat7);
                v.add(dat8);
                v.add(dat9);
                v.add(dat10);
                v.add(dat11);
                v.add(dat12);
                v.add(dat13);

                dtm.addRow(v);
                b = true;

                //  int i=Integer.parseInt(dat0)+1;
                //  String dat0_new= String.valueOf(i);
                trans_id.setText(dat0);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        kGradientPanel1 = new keeptoo.KGradientPanel();
        jLabel1 = new javax.swing.JLabel();
        kGradientPanel2 = new keeptoo.KGradientPanel();
        jLabel12 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        source = new javax.swing.JComboBox();
        destination = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        first_class = new javax.swing.JRadioButton();
        second_class = new javax.swing.JRadioButton();
        eco_class = new javax.swing.JRadioButton();
        day = new com.toedter.calendar.JDateChooser();
        sr = new javax.swing.JRadioButton();
        or = new javax.swing.JRadioButton();
        nr = new javax.swing.JRadioButton();
        ac = new javax.swing.JRadioButton();
        normal = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        Date date=new Date();
        SpinnerDateModel sm=new SpinnerDateModel(date,null,null,Calendar.HOUR_OF_DAY);
        dep_time = new javax.swing.JSpinner(sm);
        Date date1=new Date();
        SpinnerDateModel sm1=new SpinnerDateModel(date1,null,null,Calendar.HOUR_OF_DAY);
        arr_time = new javax.swing.JSpinner(sm1);
        jLabel13 = new javax.swing.JLabel();
        t_no = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        trans_id = new javax.swing.JTextField();
        fare = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel16 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jLabel17 = new javax.swing.JLabel();
        nic = new javax.swing.JTextField();
        seat_count = new javax.swing.JTextField();
        com_count = new javax.swing.JTextField();
        ava = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        seat_qty = new com.toedter.components.JSpinField();
        line2 = new javax.swing.JComboBox();
        line3 = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(102, 255, 255));
        setForeground(new java.awt.Color(102, 255, 255));
        setUndecorated(true);

        kGradientPanel1.setkStartColor(new java.awt.Color(51, 255, 51));
        kGradientPanel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                kGradientPanel1MouseDragged(evt);
            }
        });
        kGradientPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                kGradientPanel1MousePressed(evt);
            }
        });
        kGradientPanel1.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("              Intercity Passenger  Train Schedule For Reservation");
        kGradientPanel1.add(jLabel1);
        jLabel1.setBounds(240, 0, 760, 40);

        kGradientPanel2.setkStartColor(new java.awt.Color(51, 255, 51));
        kGradientPanel2.setLayout(null);

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/shutdown_48px.png"))); // NOI18N
        jLabel12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel12MouseClicked(evt);
            }
        });
        kGradientPanel2.add(jLabel12);
        jLabel12.setBounds(0, 0, 50, 40);

        jPanel1.setBackground(new java.awt.Color(255, 204, 204));
        jPanel1.setBorder(new javax.swing.border.MatteBorder(null));

        jLabel2.setText("Source");

        jLabel3.setText("Destination");

        jLabel5.setText("Departure Time");

        jLabel6.setText("Arrival Time");

        jLabel7.setText("Day");

        jLabel9.setText("Intercity Reservation Type");

        jLabel10.setText("Class ");

        buttonGroup3.add(first_class);
        first_class.setText("1st Class");

        buttonGroup3.add(second_class);
        second_class.setText("2nd Class");

        buttonGroup3.add(eco_class);
        eco_class.setText("Economy Class");

        buttonGroup1.add(sr);
        sr.setText("Sleperts Reservation");

        buttonGroup1.add(or);
        or.setText("Observation Reservation");

        buttonGroup1.add(nr);
        nr.setSelected(true);
        nr.setText("Normal Reservation");

        buttonGroup2.add(ac);
        ac.setText("A/C");

        buttonGroup2.add(normal);
        normal.setText("Non A/C");
        normal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                normalActionPerformed(evt);
            }
        });

        jLabel4.setText("Train Fare");

        jLabel11.setText("Total Seat Quantity :");

        JSpinner.DateEditor de= new JSpinner.DateEditor(dep_time, "hh:mm:ssa");
        dep_time.setEditor(de);

        JSpinner.DateEditor de1= new JSpinner.DateEditor(arr_time, "hh:mm:ssa");
        arr_time.setEditor(de1);

        jLabel13.setText("Train No:");

        t_no.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                t_noKeyPressed(evt);
            }
        });

        jLabel14.setText("Facilities");

        jLabel15.setText("Transportation ID");

        trans_id.setText(" ");
        trans_id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trans_idActionPerformed(evt);
            }
        });
        trans_id.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                trans_idKeyPressed(evt);
            }
        });

        fare.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fareMouseClicked(evt);
            }
        });

        jLabel8.setText("Seat Number");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "60", " ", " ", " " }));
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });

        jLabel16.setText("Compartment Number");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", " " }));
        jComboBox2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox2ItemStateChanged(evt);
            }
        });

        jLabel17.setText("National Identity Card :");

        nic.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nicKeyPressed(evt);
            }
        });

        jButton4.setText("Save Seeat");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        line2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SELECT Source Line First", "Main Line", "Matale Line", "Puttlam Line", "Northern Line", "Batticoloa Line", "Coast Line", "KV Line", "Trincomalee Line", "Talaimannar Line" }));
        line2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                line2ItemStateChanged(evt);
            }
        });
        line2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                line2MouseClicked(evt);
            }
        });
        line2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                line2KeyPressed(evt);
            }
        });

        line3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SELECT Destination Line First", "Main Line", "Matale Line", "Puttlam Line", "Northern Line", "Batticoloa Line", "Coast Line", "KV Line", "Trincomalee Line", "Talaimannar Line" }));
        line3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                line3ItemStateChanged(evt);
            }
        });
        line3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                line3FocusGained(evt);
            }
        });
        line3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                line3MouseClicked(evt);
            }
        });
        line3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                line3KeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sr)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(1, 1, 1)
                        .addComponent(or)
                        .addGap(5, 5, 5)
                        .addComponent(nr))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(80, 80, 80)
                                .addComponent(trans_id, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addGap(136, 136, 136)
                                .addComponent(t_no, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(50, 50, 50)
                                .addComponent(nic, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(line2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(37, 37, 37)
                                .addComponent(line3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(137, 137, 137)
                                .addComponent(source, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(116, 116, 116)
                                .addComponent(destination, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addGap(79, 79, 79)
                                .addComponent(seat_qty, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(seat_count, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(120, 120, 120)
                                        .addComponent(com_count, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel14)
                                    .addComponent(ac))
                                .addGap(10, 10, 10)
                                .addComponent(ava, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20)
                                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(70, 70, 70)
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(281, 281, 281)
                                .addComponent(fare, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(256, 256, 256)
                                .addComponent(dep_time, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(274, 274, 274)
                                .addComponent(arr_time, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(261, 261, 261)
                                .addComponent(day, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(normal))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(first_class)))
                .addGap(20, 20, 20)
                .addComponent(second_class)
                .addGap(9, 9, 9)
                .addComponent(eco_class)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(trans_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel13))
                    .addComponent(t_no, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(nic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(line2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(line3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel2))
                    .addComponent(source, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(destination, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(seat_qty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sr)
                            .addComponent(or)
                            .addComponent(nr))))
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(seat_count, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16)
                    .addComponent(com_count, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jLabel14)
                        .addGap(6, 6, 6)
                        .addComponent(ac))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(normal))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ava, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(first_class)
                            .addComponent(second_class)
                            .addComponent(eco_class)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel10)))
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(fare, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel5))
                    .addComponent(dep_time, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel6))
                    .addComponent(arr_time, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(day, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 204));
        jPanel2.setBorder(new javax.swing.border.MatteBorder(null));
        jPanel2.setLayout(null);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Transport ID", "Train No", "Source", "Destination ", "Type", "Facilities", "Class", "Fare", "Departure Time", "Arrival Time", "Date", "seat"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jPanel2.add(jScrollPane1);
        jScrollPane1.setBounds(10, 20, 780, 540);

        jPanel3.setBackground(new java.awt.Color(255, 153, 255));
        jPanel3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel3.setLayout(null);

        jButton1.setText("INSERT");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton1);
        jButton1.setBounds(220, 3, 170, 40);

        jButton2.setText("UPDATE");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton2);
        jButton2.setBounds(440, 3, 200, 40);

        jButton3.setText("DELETE");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton3);
        jButton3.setBounds(720, 3, 200, 40);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(kGradientPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(kGradientPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(kGradientPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(kGradientPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
           
            SimpleDateFormat sdf1 = new SimpleDateFormat("hh:mm:ss");
   
            String start_time=sdf1.format(dep_time.getValue());
            String end_time=sdf1.format(arr_time.getValue());
            Date s_time;
            Date e_time;
            try {
                s_time = sdf1.parse(start_time);
                e_time=sdf1.parse(end_time);
                if (s_time.getTime()>e_time.getTime()) {
                  //  System.out.println("check here");
                JOptionPane.showMessageDialog(null, "Wrong Time Inputs", null, JOptionPane.ERROR_MESSAGE);
            
                }
            } catch (ParseException ex) {
                ex.printStackTrace();
            }
            
            
            Date dd=new Date();
            Date now = day.getDate();
            if ( dd.getDate()> now.getDate()) {
                JOptionPane.showMessageDialog(null, "You can not booking for previous dates", null, JOptionPane.ERROR_MESSAGE);
                day.setDate(dd);
            }
           
            validate_nic();
            String type;
            if (sr.isSelected()) {
                type = "Sleperts Reservation";
            } else if (or.isSelected()) {
                type = "Observation Reservation";
            } else {
                type = "Normal Reservation";
            }

            String facility;
            if (ac.isSelected()) {
                facility = "A/C";
            } else {
                facility = "Non A/C";
            }

            String classes;
            if (first_class.isSelected()) {
                classes = "1st Class";
            } else if (second_class.isSelected()) {
                classes = "2nd Class";
            } else {
                classes = "Economy Class";
            }
            Date d = new Date();
            SimpleDateFormat sdf = new SimpleDateFormat("hh:mm:ss");
            String arr = sdf.format(arr_time.getValue());
            String dep = sdf.format(dep_time.getValue());

            if (!(nic.getText().isEmpty())) {
                db.iud("insert into train_schedule (transportation_id,train_no,source, destination, type, facilities, class, fare, departure_time, arrival_time,day,nic,seat) values"
                        + " ('" + trans_id.getText() + "','" + t_no.getText() + "','" + source.getSelectedItem().toString() + "','" + destination.getSelectedItem().toString() + "','" + type + "','" + facility + "','" + classes + "','" + Integer.parseInt(fare.getText()) + "','" + dep.toString() + "','" + arr.toString() + "','" + day.getDate().toString() + "','" + nic.getText() + "','" + seat_qty.getValue() + "')");
                JOptionPane.showMessageDialog(null, "Insert Successfully", "Thank You", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "Enter Valid NIC", "Thank You", JOptionPane.WARNING_MESSAGE);
            }

            refresh();

        }
        catch(NullPointerException ex){
            JOptionPane.showMessageDialog(null, "Please fill out all Relevant Details", "Thank You", JOptionPane.ERROR_MESSAGE);
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void normalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_normalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_normalActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            String type;
            if (sr.isSelected()) {
                type = "Sleperts Reservation";
            } else if (or.isSelected()) {
                type = "Observation Reservation";
            } else {
                type = "Normal Reservation";
            }

            String facility;
            if (ac.isSelected()) {
                facility = "A/C";
            } else {
                facility = "Non A/C";
            }

            String classes;
            if (first_class.isSelected()) {
                classes = "1st Class";
            } else if (second_class.isSelected()) {
                classes = "2nd Class";
            } else {
                classes = "Economy Class";
            }
            Date d = new Date();
            SimpleDateFormat sdf = new SimpleDateFormat("hh:mm:ss");
            String arr = sdf.format(arr_time.getValue());
            String dep = sdf.format(dep_time.getValue());

            db.iud("update train_schedule set source='" + source.getSelectedItem().toString() + "',destination='" + destination.getSelectedItem().toString() + "', type='" + type + "', facilities='" + facility + "', class='" + classes + "' , fare='" + Integer.parseInt(fare.getText()) + "', departure_time='" + dep.toString() + "', arrival_time='" + arr.toString() + "' ,day='" + day.getDate().toString() + "',seat='" + seat_qty.getValue() + "' where transportation_id='" + trans_id.getText() + "' AND train_no='" + t_no.getText() + "'");
            refresh();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        try {
            DefaultTableModel dtm1 = (DefaultTableModel) jTable1.getModel();
            int selectedRow = jTable1.getSelectedRow();

            trans_id.setText(dtm1.getValueAt(selectedRow, 0).toString());
            t_no.setText(dtm1.getValueAt(selectedRow, 1).toString());
            
            
            
            source.setSelectedItem(dtm1.getValueAt(selectedRow, 2).toString());
            destination.setSelectedItem(dtm1.getValueAt(selectedRow, 3).toString());
            String type = dtm1.getValueAt(selectedRow, 4).toString();
            //check the value from table and select relevant radio button
            String sr_check = sr.getText();
            String or_check = or.getText();
            if (type.equals(sr_check)) {
                sr.setSelected(true);
            } else if (type.equals(or_check)) {
                or.setSelected(true);
            } else {
                nr.setSelected(true);
            }

            String ac_check = ac.getText();
            String non_ac_check = normal.getText();
            String facility = dtm1.getValueAt(selectedRow, 5).toString();
            if (facility.equals(ac_check)) {
                ac.setSelected(true);
            } else {
                normal.setSelected(true);
            }

            String class_check = dtm1.getValueAt(selectedRow, 6).toString();
            String first_check = first_class.getText();
            String second_check = second_class.getText();
            if (class_check.equals(first_check)) {
                first_class.setSelected(true);
            } else if (class_check.equals(second_check)) {
                second_class.setSelected(true);
            } else {
                eco_class.setSelected(true);
            }
            String f = (dtm1.getValueAt(selectedRow, 7).toString());
            fare.setText(f);

            String departure = dtm1.getValueAt(selectedRow, 8).toString();
            Date d1 = new SimpleDateFormat("hh:mm:ss").parse(departure);
            dep_time.setValue(d1);

            String arrival = dtm1.getValueAt(selectedRow, 9).toString();
            Date d2 = new SimpleDateFormat("hh:mm:ss").parse(arrival);
            arr_time.setValue(d2);

            seat_qty.setValue(Integer.parseInt(dtm1.getValueAt(selectedRow, 11).toString()));
            
            

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void trans_idActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trans_idActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_trans_idActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            db.iud("DELETE from train_schedule where transportation_id='" + trans_id.getText() + "' AND train_no='" + t_no.getText() + "'");
            refresh();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void fareMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fareMouseClicked
        try {
            int db_train_fare = 0;
            String source_require = source.getSelectedItem().toString();
            String destination_require = destination.getSelectedItem().toString();

            String type_require;
            if (sr.isSelected()) {
                type_require = "Sleperts Reservation";
            } else if (or.isSelected()) {
                type_require = "Observation Reservation";
            } else {
                type_require = "Normal Reservation";
            }

            String facilities_require;
            if (ac.isSelected()) {
                facilities_require = "A/C";
            } else {
                facilities_require = "Non A/C";
            }

            String class_require;
            if (first_class.isSelected()) {
                class_require = "1st Class";
            } else if (second_class.isSelected()) {
                class_require = "2nd Class";
            } else {
                class_require = "Economy Class";
            }

            ResultSet rs;
            Statement st;
            Connection con = db.getDBCon();
            st = con.createStatement();
//idtrain_fare, type, source, destination, facilities, class, price, authorized, ticket_price            
            String sql = "select ticket_price from train_fare where type='" + type_require + "' and source='" + source_require + "' and destination='" + destination_require + "' and facilities='" + facilities_require + "' and class='" + class_require + "'";
            rs = st.executeQuery(sql);
            while (rs.next()) {
                db_train_fare = Integer.parseInt(rs.getString("ticket_price"));
            }
            int tot_train_fare = db_train_fare * seat_qty.getValue();
            fare.setText(String.valueOf(tot_train_fare));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_fareMouseClicked

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try {
            if (!(nic.getText().isEmpty() | t_no.getText().isEmpty())) {
                int required_seat = Integer.parseInt(seat_count.getText());
                int required_com = Integer.parseInt(com_count.getText());

                int com_no = 0;
                int seat_no = 0;
                //retreive all data from the seat database
                //compare interface data wth database data
                //using db compartment number and seat number compare with interface data and update available label in the interface.  
                ResultSet rs;
                Statement st;
                Connection con = db.getDBCon();
                String sql = "Select * from seat where train_no='" + t_no.getText() + "'";
                st = con.createStatement();
                rs = st.executeQuery(sql);
                while (rs.next()) {
                    com_no = Integer.parseInt(rs.getString("compartment_no"));
                    seat_no = Integer.parseInt(rs.getString("seat_no"));
                    if (required_com == com_no) {

                        if (required_seat == seat_no) {
                            ava.setText("BOOKING");
                            JOptionPane.showMessageDialog(null, "Sorry Already Booked", "Thank You", JOptionPane.WARNING_MESSAGE);
                            break;
                        } else {
                            ava.setText("AVAILABLE");

                        }
                    }
                }
                if (rs.getRow() == 0) {
                    db.iud("insert into seat (train_no, seat_no, nic, compartment_no) VALUES ('" + t_no.getText() + "','" + Integer.parseInt(seat_count.getText()) + "','" + nic.getText() + "','" + Integer.parseInt(com_count.getText()) + "') ");
                    JOptionPane.showMessageDialog(null, "Seat Reserveed", "Thank You", JOptionPane.INFORMATION_MESSAGE);

                } else if (ava.getText().equals("AVAILABLE")) {
                    db.iud("insert into seat (train_no, seat_no, nic, compartment_no) VALUES ('" + t_no.getText() + "','" + Integer.parseInt(seat_count.getText()) + "','" + nic.getText() + "','" + Integer.parseInt(com_count.getText()) + "') ");
                    JOptionPane.showMessageDialog(null, "Seat Reserveed", "Thank You", JOptionPane.INFORMATION_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Please fill out relevant Details", "Thank You", JOptionPane.ERROR_MESSAGE);

            }
        } catch (SQLIntegrityConstraintViolationException ex) {
            JOptionPane.showMessageDialog(null, "Duplicate Entry Detected", "Thank You", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
        try {

            String seat = jComboBox1.getSelectedItem().toString();
            if (!(seat.equals("00"))) {
                seat_count.setText(seat);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jComboBox1ItemStateChanged

    private void jComboBox2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox2ItemStateChanged
        try {
            String com_counts = jComboBox2.getSelectedItem().toString();
            if (!(com_counts.equals("00"))) {
                com_count.setText(com_counts);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jComboBox2ItemStateChanged

    private void line2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_line2ItemStateChanged
        try {
            source.setSelectedItem("null");
            source.removeAllItems();
            //Matale Line  Puttlam Line  Northern Line  Batticoloa Line  Coast Line  KV Line  Trincomalee Line Talaimannar Line
            String main[] = {"Maradana", "Dematagoda", "Kelaniya", "Wanawasala", "Hunupitiya", "Enderamulla", "Horape", "Ragama", "Walpola", "Batuwatte", "Bulugahagoda", "Ganemulla", "Yagoda", "Gampaha", "Daraluwa", "Bemmulla", "Magelegoda", "Heendeniya", "Veyangoda", "Wandurawa",
                "Keenawala", "Pallewala", "Ganegoda", "Wijayarajadahana", "Mihirigama", "Wilwatte", "Botale", "Abeypussa", "Yattalgoda", "Buthgamuwa", "Alawwa", "Wlakubura", "Polgahawela",
                "Panaleeya", "Tismalpola", "Yatagama", "Rambukkana", "Kadigamuwa", "Gangoda", "Ihalakotte", "Balana", "Kadugannawa", "Pilimatalawa", "Peradeniya", "Koshinna", "Gelioya",
                "Gampola", "Tembligala", "Ulapone", "Nawalapitiya", "Inguruoya", "Galaboda", "Watawala", "Ihalawatawala", "Rosella", "Hatton", "Kotagala", "Talawakele", "watagoda",
                "Greatwestern", "Radella", "Nanuoya", "Perakumpura", "Ambewela", "Pattipola", "Ohiya", "Idalgasinna", "Haputale", "Deyatalawa", "Bandarawela", "Kinigama",
                "Heeloya", "Kitalelle", "Elle", "Demodara", "Uduwara", "Haliela", "Badulla"
            };
            String matale[] = {"Sarasaviuyana", "Kandy", "Mahaiyawa", "Katugastota", "Udatalawinna", "Wattegama", "Pathanpha", "Udaththawala", "Ukuwela", "Matale"};
            String puttalama[] = {"Peralanda", "Kandana", "Kapuwatte", "Ja-Ela", "Tudella", "Kudahakapola", "Alawatupitiya", "Seeduwa", "Liyanagemulla",
                "Katunayaka Airport", "Katunayake", "Trade Zoone", "Kurana", "Negombo", "kattuwa", "Kochchikade", "Waikkala", "Bolawatte",
                "Borelessa", "Lunuwila", "Tummodara", "Nattandiya", "Walahapitiya", "Kudawewa", "Nelumpokuna", "Madampe", "Kakkapalliya",
                "Sawarana", "Chilaw", "Manuwangama", "Bangadeniya", "Arachchikattuwa", "Anawilundawa", "Battaluoya", "Pulachchikulam", "Mundal",
                "Mangalaeliya", "Madurankuliya", "Erukkalam pendu", "Palavi", "Thilladiya", "Puttalam", "Noor Nagar", "Karadipuwar", "Periyanagavillu"
            };

            String northern[] = {"Girambe", "Talawattegedara", "Potuhera", "Nailiya", "Kurunegala", "Muththettugala", "Wellawa", "Ganewatte", "Yahapauwa", "Nagollagama", "Timbiriyagedara",
                "Maho", "Randenigama", "Abanpola", "Galgamuwa", "Senarathgama", "Thambuttegama", "Talawa", "Srawasthipura", "Anuradhapura Town", "Anuradhapura",
                "Mihintale Junction", "Saliyapura", "Parasangahawewa", "Medagama", "Medawachchiya", "Poonewa", "Erittaperiyakulam", "Vavuniya", "Mihintale",
                "Parasangahawewa", "Medawachchiya", "Vavuniya", "Omantai", "Puliyankulama", "Mankulam", "Murukandi", "Kilinochchi", "Paranthan", "ElephantPass",
                "Pallai", "Kodikamam", "Chavakachcheri", "Navatkuli", "Jaffna", "Jaffna CSM", "Jaffna SM", "Kondavil", "Chunnakam", "Kankesanthurei"
            };

            String batticola[] = {"Konwewa", "Moragollagama", "kekirawa", "Kalawewa", "Palugaswewa", "Gal Oya Junction", "Higurakgoda", "Polonnaruwa", "Manampitiya", "Welikanda",
                "Punani", "Valachchenai", "Eravur", "Batticaloa"};

            String cost[] = {"Fort", "Secretartat Halt", "Kompnnavidiya", "Kollupitiya", "Bambalapitiya", "wellawatte", "Dehiwala", "Mount Laviniya", "Rathmalana", "Angulana",
                "Lunawa", "Moratuwa", "Koralawella", "Egodauyana", "Panadura", "Pinwatte", "Wadduwa", "Train Halt 01", "Kalutara North", "Kaluthara South", "Katukurunda",
                "Payagala North", "Payagala south", "Maggona", "Beruwala", "Hettimulla", "Aluthgama", "Bentota", "Induruwa", "Mha Induruwa", "kosgoda", "Piyagama",
                "Ahungalle", "Patagamgoda", "Balapitiya", "Andadola", "Kandegoda", "Ambalangoda", "Madampagama", "Akurala", "Kahawa", "Telwatte", "Seenigama",
                "Hikkaduwa", "Thiranagama", "Kumarakanda", "Dodanduwa", "Rathgama", "Boossa", "Ginthota", "Piyadigama", "Richmond Hill", "Galle", "Katugoda",
                "Unawatuna", "Taple", "Habaraduwa", "Koggala", "Kathaluwa", "Ahangama", "Midigama", "Kumbalgama", "weligama", "Polwathumodara", "Mirissa", "Kamburugamuwa",
                "Walgama", "Matara", "Piliduwa"};

            String kv[] = {"Baseline Road", "Cotta Road", "Narahenpita", "Kirulapone", "Nugegoda", "Udhamulla", "Nawinna", "Maharagama", "Pannipitiya", "Kottawa", "Malapalle",
                "Homagama Hospital", "Homagama", "Panagoda", "Godagama", "Meegoda", "Watareka", "Padukka", "Arukkuwatte", "Angampitiya", "Uggalla", "Pinnawala",
                "Gammana", "Morakele", "Waga", "Kadugoda", "Kosgama", "puwakpitiya", "Avisawella"};

            String trinco[] = {"Kantale", "Tambalagamuwa", "China Bay", "Trincomalee"};

            String mannar1[] = {"Cheddikulam", "Madu Road", "Murunkan", "Mannar", "Pesalai", "Talaimannar", "Talaimannar Pier"};

            if (line2.getSelectedItem().toString().equals("Main Line")) {
                for (int i = 0; i < main.length; i++) {
                    source.addItem(main[i]);
                }
            }
            if (line2.getSelectedItem().toString().equals("Matale Line")) {
                for (int j = 0; j < matale.length; j++) {
                    source.addItem(matale[j]);
                }
            }
            if (line2.getSelectedItem().toString().equals("Puttlam Line")) {
                for (int k = 0; k < puttalama.length; k++) {
                    source.addItem(puttalama[k]);
                }
            }
            if (line2.getSelectedItem().toString().equals("Northern Line")) {
                for (int m = 0; m < northern.length; m++) {
                    source.addItem(northern[m]);
                }
            }
            if (line2.getSelectedItem().toString().equals("Batticoloa Line")) {
                for (int n = 0; n < batticola.length; n++) {
                    source.addItem(batticola[n]);
                }
            }
            if (line2.getSelectedItem().toString().equals("Coast Line")) {
                for (int o = 0; o < cost.length; o++) {
                    source.addItem(cost[o]);
                }
            }
            if (line2.getSelectedItem().toString().equals("KV Line")) {
                for (int p = 0; p < kv.length; p++) {
                    source.addItem(kv[p]);
                }
            }
            if (line2.getSelectedItem().toString().equals("Trincomalee Line")) {
                for (int q = 0; q < trinco.length; q++) {
                    source.addItem(trinco[q]);
                }
            }
            if (line2.getSelectedItem().toString().equals("Talaimannar Line")) {

                for (int r = 0; r < mannar1.length; r++) {

                    source.addItem(mannar1[r]);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_line2ItemStateChanged

    private void line2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_line2MouseClicked

    }//GEN-LAST:event_line2MouseClicked

    private void line3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_line3ItemStateChanged
        try {
            destination.setSelectedItem("null");
            destination.removeAllItems();
            //Matale Line  Puttlam Line  Northern Line  Batticoloa Line  Coast Line  KV Line  Trincomalee Line Talaimannar Line
            String main[] = {"Maradana", "Dematagoda", "Kelaniya", "Wanawasala", "Hunupitiya", "Enderamulla", "Horape", "Ragama", "Walpola", "Batuwatte", "Bulugahagoda", "Ganemulla", "Yagoda", "Gampaha", "Daraluwa", "Bemmulla", "Magelegoda", "Heendeniya", "Veyangoda", "Wandurawa",
                "Keenawala", "Pallewala", "Ganegoda", "Wijayarajadahana", "Mihirigama", "Wilwatte", "Botale", "Abeypussa", "Yattalgoda", "Buthgamuwa", "Alawwa", "Wlakubura", "Polgahawela",
                "Panaleeya", "Tismalpola", "Yatagama", "Rambukkana", "Kadigamuwa", "Gangoda", "Ihalakotte", "Balana", "Kadugannawa", "Pilimatalawa", "Peradeniya", "Koshinna", "Gelioya",
                "Gampola", "Tembligala", "Ulapone", "Nawalapitiya", "Inguruoya", "Galaboda", "Watawala", "Ihalawatawala", "Rosella", "Hatton", "Kotagala", "Talawakele", "watagoda",
                "Greatwestern", "Radella", "Nanuoya", "Perakumpura", "Ambewela", "Pattipola", "Ohiya", "Idalgasinna", "Haputale", "Deyatalawa", "Bandarawela", "Kinigama",
                "Heeloya", "Kitalelle", "Elle", "Demodara", "Uduwara", "Haliela", "Badulla"
            };
            String matale[] = {"Sarasaviuyana", "Kandy", "Mahaiyawa", "Katugastota", "Udatalawinna", "Wattegama", "Pathanpha", "Udaththawala", "Ukuwela", "Matale"};
            String puttalama[] = {"Peralanda", "Kandana", "Kapuwatte", "Ja-Ela", "Tudella", "Kudahakapola", "Alawatupitiya", "Seeduwa", "Liyanagemulla",
                "Katunayaka Airport", "Katunayake", "Trade Zoone", "Kurana", "Negombo", "kattuwa", "Kochchikade", "Waikkala", "Bolawatte",
                "Borelessa", "Lunuwila", "Tummodara", "Nattandiya", "Walahapitiya", "Kudawewa", "Nelumpokuna", "Madampe", "Kakkapalliya",
                "Sawarana", "Chilaw", "Manuwangama", "Bangadeniya", "Arachchikattuwa", "Anawilundawa", "Battaluoya", "Pulachchikulam", "Mundal",
                "Mangalaeliya", "Madurankuliya", "Erukkalam pendu", "Palavi", "Thilladiya", "Puttalam", "Noor Nagar", "Karadipuwar", "Periyanagavillu"
            };

            String northern[] = {"Girambe", "Talawattegedara", "Potuhera", "Nailiya", "Kurunegala", "Muththettugala", "Wellawa", "Ganewatte", "Yahapauwa", "Nagollagama", "Timbiriyagedara",
                "Maho", "Randenigama", "Abanpola", "Galgamuwa", "Senarathgama", "Thambuttegama", "Talawa", "Srawasthipura", "Anuradhapura Town", "Anuradhapura",
                "Mihintale Junction", "Saliyapura", "Parasangahawewa", "Medagama", "Medawachchiya", "Poonewa", "Erittaperiyakulam", "Vavuniya", "Mihintale",
                "Parasangahawewa", "Medawachchiya", "Vavuniya", "Omantai", "Puliyankulama", "Mankulam", "Murukandi", "Kilinochchi", "Paranthan", "ElephantPass",
                "Pallai", "Kodikamam", "Chavakachcheri", "Navatkuli", "Jaffna", "Jaffna CSM", "Jaffna SM", "Kondavil", "Chunnakam", "Kankesanthurei"
            };

            String batticola[] = {"Konwewa", "Moragollagama", "kekirawa", "Kalawewa", "Palugaswewa", "Gal Oya Junction", "Higurakgoda", "Polonnaruwa", "Manampitiya", "Welikanda",
                "Punani", "Valachchenai", "Eravur", "Batticaloa"};

            String cost[] = {"Fort", "Secretartat Halt", "Kompnnavidiya", "Kollupitiya", "Bambalapitiya", "wellawatte", "Dehiwala", "Mount Laviniya", "Rathmalana", "Angulana",
                "Lunawa", "Moratuwa", "Koralawella", "Egodauyana", "Panadura", "Pinwatte", "Wadduwa", "Train Halt 01", "Kalutara North", "Kaluthara South", "Katukurunda",
                "Payagala North", "Payagala south", "Maggona", "Beruwala", "Hettimulla", "Aluthgama", "Bentota", "Induruwa", "Mha Induruwa", "kosgoda", "Piyagama",
                "Ahungalle", "Patagamgoda", "Balapitiya", "Andadola", "Kandegoda", "Ambalangoda", "Madampagama", "Akurala", "Kahawa", "Telwatte", "Seenigama",
                "Hikkaduwa", "Thiranagama", "Kumarakanda", "Dodanduwa", "Rathgama", "Boossa", "Ginthota", "Piyadigama", "Richmond Hill", "Galle", "Katugoda",
                "Unawatuna", "Taple", "Habaraduwa", "Koggala", "Kathaluwa", "Ahangama", "Midigama", "Kumbalgama", "weligama", "Polwathumodara", "Mirissa", "Kamburugamuwa",
                "Walgama", "Matara", "Piliduwa"};

            String kv[] = {"Baseline Road", "Cotta Road", "Narahenpita", "Kirulapone", "Nugegoda", "Udhamulla", "Nawinna", "Maharagama", "Pannipitiya", "Kottawa", "Malapalle",
                "Homagama Hospital", "Homagama", "Panagoda", "Godagama", "Meegoda", "Watareka", "Padukka", "Arukkuwatte", "Angampitiya", "Uggalla", "Pinnawala",
                "Gammana", "Morakele", "Waga", "Kadugoda", "Kosgama", "puwakpitiya", "Avisawella"};

            String trinco[] = {"Kantale", "Tambalagamuwa", "China Bay", "Trincomalee"};

            String mannar1[] = {"Cheddikulam", "Madu Road", "Murunkan", "Mannar", "Pesalai", "Talaimannar", "Talaimannar Pier"};

            if (line3.getSelectedItem().toString().equals("Main Line")) {
                for (int i = 0; i < main.length; i++) {
                    destination.addItem(main[i]);
                }
            }
            if (line3.getSelectedItem().toString().equals("Matale Line")) {
                for (int j = 0; j < matale.length; j++) {
                    destination.addItem(matale[j]);
                }
            }
            if (line3.getSelectedItem().toString().equals("Puttlam Line")) {
                for (int k = 0; k < puttalama.length; k++) {
                    destination.addItem(puttalama[k]);
                }
            }
            if (line3.getSelectedItem().toString().equals("Northern Line")) {
                for (int m = 0; m < northern.length; m++) {
                    destination.addItem(northern[m]);
                }
            }
            if (line3.getSelectedItem().toString().equals("Batticoloa Line")) {
                for (int n = 0; n < batticola.length; n++) {
                    destination.addItem(batticola[n]);
                }
            }
            if (line3.getSelectedItem().toString().equals("Coast Line")) {
                for (int o = 0; o < cost.length; o++) {
                    destination.addItem(cost[o]);
                }
            }
            if (line3.getSelectedItem().toString().equals("KV Line")) {
                for (int p = 0; p < kv.length; p++) {
                    destination.addItem(kv[p]);
                }
            }
            if (line3.getSelectedItem().toString().equals("Trincomalee Line")) {
                for (int q = 0; q < trinco.length; q++) {
                    destination.addItem(trinco[q]);
                }
            }
            if (line3.getSelectedItem().toString().equals("Talaimannar Line")) {

                for (int r = 0; r < mannar1.length; r++) {

                    destination.addItem(mannar1[r]);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_line3ItemStateChanged

    private void line3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_line3MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_line3MouseClicked

    private void trans_idKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_trans_idKeyPressed
        try {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                t_no.grabFocus();

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_trans_idKeyPressed

    private void t_noKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_noKeyPressed
          try {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                nic.grabFocus();

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_t_noKeyPressed

    private void nicKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nicKeyPressed
        try {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
               line2.grabFocus();

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_nicKeyPressed

    private void line2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_line2KeyPressed
         try {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
               line3.grabFocus();

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_line2KeyPressed

    private void line3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_line3KeyPressed
         try {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            seat_qty.grabFocus();
            

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_line3KeyPressed

    private void line3FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_line3FocusGained
        
    }//GEN-LAST:event_line3FocusGained

    private void jLabel12MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel12MouseClicked
      dispose();
    }//GEN-LAST:event_jLabel12MouseClicked

    private void kGradientPanel1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_kGradientPanel1MousePressed
         x = evt.getX();
        y = evt.getY();
    }//GEN-LAST:event_kGradientPanel1MousePressed

    private void kGradientPanel1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_kGradientPanel1MouseDragged
        int xx = evt.getXOnScreen();
        int yy = evt.getYOnScreen();
        this.setLocation(xx - x, yy - y);
    }//GEN-LAST:event_kGradientPanel1MouseDragged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(train_schedule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(train_schedule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(train_schedule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(train_schedule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new train_schedule().setVisible(true);
            }
        });
    }

    void refresh() {
        try {
            DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
            dtm.setRowCount(0);
            ResultSet rs;
            Statement st;
            Connection con = db.getDBCon();
            st = con.createStatement();
            String sql = "select * from train_schedule";
            rs = st.executeQuery(sql);
            boolean b = false;
            while (rs.next()) {

                Vector vv = new Vector();
                String dat0 = rs.getString("transportation_id");
                String dat1 = rs.getString("train_no");
                String dat2 = rs.getString("source");
                String dat3 = rs.getString("destination");

                String dat6 = rs.getString("type");
                String dat7 = rs.getString("facilities");
                String dat8 = rs.getString("class");
                String dat9 = rs.getString("fare");
                String dat10 = rs.getString("departure_time");
                String dat11 = rs.getString("arrival_time");
                String dat12 = rs.getString("day");
                String dat13 = rs.getString("seat");

                vv.add(dat0);
                vv.add(dat1);
                vv.add(dat2);
                vv.add(dat3);

                vv.add(dat6);
                vv.add(dat7);
                vv.add(dat8);
                vv.add(dat9);
                vv.add(dat10);
                vv.add(dat11);
                vv.add(dat12);
                vv.add(dat13);

                dtm.addRow(vv);
                b = true;

            }

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton ac;
    private javax.swing.JSpinner arr_time;
    private javax.swing.JLabel ava;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JTextField com_count;
    private com.toedter.calendar.JDateChooser day;
    private javax.swing.JSpinner dep_time;
    private javax.swing.JComboBox destination;
    private javax.swing.JRadioButton eco_class;
    private javax.swing.JTextField fare;
    private javax.swing.JRadioButton first_class;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private keeptoo.KGradientPanel kGradientPanel1;
    private keeptoo.KGradientPanel kGradientPanel2;
    private javax.swing.JComboBox line2;
    private javax.swing.JComboBox line3;
    private javax.swing.JTextField nic;
    private javax.swing.JRadioButton normal;
    private javax.swing.JRadioButton nr;
    private javax.swing.JRadioButton or;
    private javax.swing.JTextField seat_count;
    private com.toedter.components.JSpinField seat_qty;
    private javax.swing.JRadioButton second_class;
    private javax.swing.JComboBox source;
    private javax.swing.JRadioButton sr;
    private javax.swing.JTextField t_no;
    private javax.swing.JTextField trans_id;
    // End of variables declaration//GEN-END:variables

    private void delete_check() {
        try {
            //check time today

            String get_time_now;
            Date date1;
            SimpleDateFormat sdf = new SimpleDateFormat("hh:mm");
            Date d = new Date();
            get_time_now = sdf.format(d);
            date1 = sdf.parse(get_time_now);

            //check date and departure time today of train_schedule table;
            String db_time;
            Date date2;
            Date d_objeect_db_time;
            ResultSet rs;
            Statement st;
            Connection con = db.getDBCon();
            String sql = "select * from train_schedule";
            st = con.createStatement();
            rs = st.executeQuery(sql);
            String trainNo;
            while (rs.next()) {
                db_time = rs.getString("arrival_time");
                trainNo = rs.getString("train_no");

                d_objeect_db_time = sdf.parse(db_time);
                db_time = sdf.format(d_objeect_db_time);
                date2 = sdf.parse(db_time);
                //if those are equal delete seat table row
                if (date1.getTime() > date2.getTime()) {
                    //JOptionPane.showMessageDialog(null, "Match");
                    db.iud("delete from seat where train_no='" + trainNo + "'");
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void validate_nic() {
        try {
            if (!(nic.getText().matches("^[0-9]{9}[vV]$"))) {
                JOptionPane.showMessageDialog(null, "Invalid Input for NIC ", "Error", JOptionPane.ERROR_MESSAGE);
                nic.setBackground(Color.red);
                nic.setForeground(Color.WHITE);
                nic.setText(null);
            } else {
                nic.setBackground(Color.GREEN);
                nic.setForeground(Color.WHITE);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
